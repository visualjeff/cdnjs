{"version":3,"file":"chartist.min.js","sources":["../source/scripts/chartist.core.js","../source/scripts/chartist.line.js","../source/scripts/chartist.bar.js","../source/scripts/chartist.pie.js"],"names":["document","window","undefined","Chartist","version","noop","n","alphaNumerate","String","fromCharCode","extend","target","source","prop","each","array","callback","i","length","value","call","getHeight","svgElement","clientHeight","Math","round","getBBox","height","parentNode","getWidth","clientWidth","width","createDraw","query","draw","container","nodeType","querySelector","__ctDraw","attr","clear","SVG","size","getDataArray","data","series","normalizeDataArray","dataArray","j","orderOfMagnitude","floor","log","abs","LN10","projectLength","bounds","options","availableHeight","getAvailableHeight","range","node","chartPadding","axisX","offset","getHighLow","highLow","high","Number","MAX_VALUE","low","getBounds","normalizedData","referenceValue","newMin","newMax","max","min","valueRange","oom","pow","ceil","step","numberOfSteps","axisY","scaleMinSpace","values","push","calculateLabelOffset","labelClass","labelInterpolationFnc","offsetFnc","interpolated","label","plain","font-family","dx","dy","addClass","remove","interpolateData","index","interpolatedValue","polarToCartesian","centerX","centerY","radius","angleInDegrees","angleInRadians","PI","x","cos","y","sin","createChartRect","xAxisOffset","yAxisOffset","x1","y1","x2","y2","this","createXAxis","chartRect","grid","labels","pos","showGrid","line","classNames","horizontal","join","showLabel","createYAxis","vertical","labelAlign","text-anchor","projectPoint","optionsProvider","defaultOptions","responsiveOptions","optionsChangedCallbackFnc","applyOptions","currentOptions","baseOptions","mql","matchMedia","matches","mediaQueryListeners","addListener","catmullRom2bezier","crp","z","d","iLen","p","Line","createChart","seriesGroups","group","className","point","pathCoordinates","showPoint","showLine","svgPathString","lineSmooth","cr","k","l","path","changedOptions","addEventListener","update","Bar","zeroPoint","biPol","periodHalfWidth","bar","seriesBarDistance","barClasses","thin","thick","Pie","totalDataSum","startAngle","total","reduce","previousValue","currentValue","donut","donutWidth","center","endAngle","start","end","arcSweep","slice","style"],"mappings":"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","sourcesContent":["(function (document, window, undefined) {\n  'use strict';\n\n  // Export chartist namespace\n  var Chartist = window.Chartist = window.Chartist || {};\n\n  Chartist.version = '0.1.5';\n\n  // Helps to simplify functional style code\n  Chartist.noop = function (n) {\n    return n;\n  };\n\n  // Generates a-z from number\n  Chartist.alphaNumerate = function (n) {\n    // Limit to a-z\n    return String.fromCharCode(97 + n % 26);\n  };\n\n  // Simple recursive object extend\n  Chartist.extend = function (target, source) {\n    target = target || {};\n    for (var prop in source) {\n      if (typeof source[prop] === 'object') {\n        target[prop] = Chartist.extend(target[prop], source[prop]);\n      } else {\n        target[prop] = source[prop];\n      }\n    }\n    return target;\n  };\n\n  // Simple array each function\n  // TODO: Use Array forEach as browser support allows (IE 9+)\n  Chartist.each = function (array, callback) {\n    for (var i = 0; i < array.length; i++) {\n      var value = callback.call(array[i], i, array[i]);\n\n      if (value === false) {\n        break;\n      }\n    }\n  };\n\n  // Get element height / width with fallback to svg BoundingBox or parent container dimensions\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=530985\n  Chartist.getHeight = function (svgElement) {\n    return svgElement.clientHeight || Math.round(svgElement.getBBox().height) || svgElement.parentNode.clientHeight;\n  };\n\n  Chartist.getWidth = function (svgElement) {\n    return svgElement.clientWidth || Math.round(svgElement.getBBox().width) || svgElement.parentNode.clientWidth;\n  };\n\n  // Create Chartist.js container and instantiate SVG.js draw\n  Chartist.createDraw = function (query, width, height) {\n    // Get dom object from query or if already dom object just use it\n    var container = query.nodeType ? query : document.querySelector(query),\n      draw;\n\n    // If container was not found we throw up\n    if (!container) {\n      throw 'Container node with selector \"' + query + '\" not found';\n    }\n\n    // If already contains draw we clear it, set width / height and return\n    if (container.__ctDraw !== undefined) {\n      draw = container.__ctDraw.attr({\n        width: width || '100%',\n        height: height || '100%'\n      });\n      // Clear the draw if its already used before so we start fresh\n      draw.clear();\n\n    } else {\n      // Create svg.js draw with width and height or use 100% as default\n      draw = SVG(container).size(width || '100%', height || '100%');\n      if (!draw) {\n        throw 'Could not instantiate SVG.js!';\n      }\n\n      // Set draw in DOM element so we have a trace for later\n      container.__ctDraw = draw;\n    }\n\n    return draw;\n  };\n\n  // Convert data series into plain array\n  Chartist.getDataArray = function (data) {\n    var array = [];\n\n    for (var i = 0; i < data.series.length; i++) {\n      // If the series array contains an object with a data property we will use the property\n      // otherwise the value directly (array or number)\n      array[i] = typeof(data.series[i]) === 'object' && data.series[i].data !== undefined ?\n        data.series[i].data : data.series[i];\n    }\n\n    return array;\n  };\n\n  // Add missing values at the end of the arrays\n  Chartist.normalizeDataArray = function (dataArray, length) {\n    for (var i = 0; i < dataArray.length; i++) {\n      if (dataArray[i].length === length) {\n        continue;\n      }\n\n      for (var j = dataArray[i].length; j < length; j++) {\n        dataArray[i][j] = 0;\n      }\n    }\n\n    return dataArray;\n  };\n\n  Chartist.orderOfMagnitude = function (value) {\n    return Math.floor(Math.log(Math.abs(value)) / Math.LN10);\n  };\n\n  Chartist.projectLength = function (draw, length, bounds, options) {\n    var availableHeight = Chartist.getAvailableHeight(draw, options);\n    return (length / bounds.range * availableHeight);\n  };\n\n  Chartist.getAvailableHeight = function (draw, options) {\n    return Chartist.getHeight(draw.node) - (options.chartPadding * 2) - options.axisX.offset;\n  };\n\n  // Get highest and lowest value of data array\n  Chartist.getHighLow = function (dataArray) {\n    var i,\n      j,\n      highLow = {\n        high: -Number.MAX_VALUE,\n        low: Number.MAX_VALUE\n      };\n\n    for (i = 0; i < dataArray.length; i++) {\n      for (j = 0; j < dataArray[i].length; j++) {\n        if (dataArray[i][j] > highLow.high) {\n          highLow.high = dataArray[i][j];\n        }\n\n        if (dataArray[i][j] < highLow.low) {\n          highLow.low = dataArray[i][j];\n        }\n      }\n    }\n\n    return highLow;\n  };\n\n  // Find the highest and lowest values in a two dimensional array and calculate scale based on order of magnitude\n  Chartist.getBounds = function (draw, normalizedData, options, referenceValue) {\n    var i,\n      newMin,\n      newMax,\n      bounds = Chartist.getHighLow(normalizedData);\n\n    // Overrides of high / low from settings\n    bounds.high = options.high || (options.high === 0 ? 0 : bounds.high);\n    bounds.low = options.low || (options.low === 0 ? 0 : bounds.low);\n\n    // Overrides of high / low based on reference value, it will make sure that the invisible reference value is\n    // used to generate the chart. This is useful when the chart always needs to contain the position of the\n    // invisible reference value in the view i.e. for bipolar scales.\n    if(referenceValue || referenceValue === 0) {\n      bounds.high = Math.max(referenceValue, bounds.high);\n      bounds.low = Math.min(referenceValue, bounds.low);\n    }\n\n    bounds.valueRange = bounds.high - bounds.low;\n    bounds.oom = Chartist.orderOfMagnitude(bounds.valueRange);\n    bounds.min = Math.floor(bounds.low / Math.pow(10, bounds.oom)) * Math.pow(10, bounds.oom);\n    bounds.max = Math.ceil(bounds.high / Math.pow(10, bounds.oom)) * Math.pow(10, bounds.oom);\n    bounds.range = bounds.max - bounds.min;\n    bounds.step = Math.pow(10, bounds.oom);\n    bounds.numberOfSteps = Math.round(bounds.range / bounds.step);\n\n    // Optimize scale step by checking if subdivision is possible based on horizontalGridMinSpace\n    while (true) {\n      var length = Chartist.projectLength(draw, bounds.step / 2, bounds, options);\n      if (length >= options.axisY.scaleMinSpace) {\n        bounds.step /= 2;\n      } else {\n        break;\n      }\n    }\n\n    // Narrow min and max based on new step\n    newMin = bounds.min;\n    newMax = bounds.max;\n    for (i = bounds.min; i <= bounds.max; i += bounds.step) {\n      if (i + bounds.step < bounds.low) {\n        newMin += bounds.step;\n      }\n\n      if (i - bounds.step > bounds.high) {\n        newMax -= bounds.step;\n      }\n    }\n    bounds.min = newMin;\n    bounds.max = newMax;\n    bounds.range = bounds.max - bounds.min;\n\n    bounds.values = [];\n    for (i = bounds.min; i <= bounds.max; i += bounds.step) {\n      bounds.values.push(i);\n    }\n\n    return bounds;\n  };\n\n  Chartist.calculateLabelOffset = function (draw, data, labelClass, labelInterpolationFnc, offsetFnc) {\n    var offset = 0;\n    for (var i = 0; i < data.length; i++) {\n      // If interpolation function returns falsy value we skipp this label\n      var interpolated = labelInterpolationFnc(data[i], i);\n      if (!interpolated && interpolated !== 0) {\n        continue;\n      }\n\n      var label = draw.plain('' + interpolated);\n      label.attr({\n        'font-family': null\n      });\n      //TODO: Check if needed\n      label.dx(0);\n      label.dy(0);\n      label.addClass(labelClass);\n\n      // Check if this is the largest label and update offset\n      offset = Math.max(offset, offsetFnc(label.node));\n      // Remove label after offset Calculation\n      label.remove();\n    }\n\n    return offset;\n  };\n\n  // Used to iterate over array, interpolate using a interpolation function and executing callback (used for rendering)\n  Chartist.interpolateData = function (data, labelInterpolationFnc, callback) {\n    for (var index = 0; index < data.length; index++) {\n      // If interpolation function returns falsy value we skipp this label\n      var interpolatedValue = labelInterpolationFnc(data[index], index);\n      if (!interpolatedValue && interpolatedValue !== 0) {\n        continue;\n      }\n\n      callback(data, index, interpolatedValue);\n    }\n  };\n\n  Chartist.polarToCartesian = function (centerX, centerY, radius, angleInDegrees) {\n    var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;\n\n    return {\n      x: centerX + (radius * Math.cos(angleInRadians)),\n      y: centerY + (radius * Math.sin(angleInRadians))\n    };\n  };\n\n  // Initialize chart drawing rectangle (area where chart is drawn) x1,y1 = bottom left / x2,y2 = top right\n  Chartist.createChartRect = function (draw, options, xAxisOffset, yAxisOffset) {\n    return {\n      x1: options.chartPadding + yAxisOffset,\n      y1: (options.height || Chartist.getHeight(draw.node)) - options.chartPadding - xAxisOffset,\n      x2: (options.width || Chartist.getWidth(draw.node)) - options.chartPadding,\n      y2: options.chartPadding,\n      width: function () {\n        return this.x2 - this.x1;\n      },\n      height: function () {\n        return this.y1 - this.y2;\n      }\n    };\n  };\n\n  Chartist.createXAxis = function (chartRect, data, grid, labels, options) {\n    // Create X-Axis\n    Chartist.each(data.labels, function (index, value) {\n      var interpolatedValue = options.axisX.labelInterpolationFnc(value, index),\n        pos = chartRect.x1 + chartRect.width() / data.labels.length * index;\n\n      // If interpolated value returns falsey (except 0) we don't draw the grid line\n      if (!interpolatedValue && interpolatedValue !== 0) {\n        return;\n      }\n\n      if (options.axisX.showGrid) {\n        var line = grid.line(pos, chartRect.y1, pos, chartRect.y2);\n        line.addClass([options.classNames.grid, options.classNames.horizontal].join(' '));\n      }\n\n      if (options.axisX.showLabel) {\n        // Use config offset for setting labels of\n        var label = labels.plain('' + interpolatedValue);\n        label.attr({\n          'font-family': null\n        });\n        label.dx(pos + 2);\n\n        label.addClass([options.classNames.label, options.classNames.horizontal].join(' '));\n\n        // TODO: should use 'alignment-baseline': 'hanging' but not supported in firefox. Instead using calculated height to offset y pos\n        label.dy(chartRect.y1 + Chartist.getHeight(label.node) + options.axisX.offset);\n      }\n    });\n  };\n\n  Chartist.createYAxis = function (chartRect, bounds, grid, labels, offset, options) {\n    // Create Y-Axis\n    Chartist.each(bounds.values, function (index, value) {\n      var interpolatedValue = options.axisY.labelInterpolationFnc(value, index),\n        pos = chartRect.y1 - chartRect.height() / bounds.values.length * index;\n\n      // If interpolated value returns falsey (except 0) we don't draw the grid line\n      if (!interpolatedValue && interpolatedValue !== 0) {\n        return;\n      }\n\n      if (options.axisY.showGrid) {\n        var line = grid.line(chartRect.x1, pos, chartRect.x2, pos);\n        line.addClass(options.classNames.grid + ' ' + options.classNames.vertical);\n      }\n\n      if (options.axisY.showLabel) {\n        // Position later\n        //TODO: make padding of 2px configurable\n        //TODO: Check for refactoring\n        var label = labels.plain('' + interpolatedValue);\n        // Reset defaults\n        label.attr({\n          'font-family': null\n        });\n        label.dx(options.axisY.labelAlign === 'right' ? offset - options.axisY.offset + options.chartPadding : options.chartPadding);\n        label.dy(pos - 2);\n        label.addClass(options.classNames.label + ' ' + options.classNames.vertical);\n\n        // Set text-anchor based on alignment\n        label.attr({\n          'text-anchor': options.axisY.labelAlign === 'right' ? 'end' : 'start'\n        });\n      }\n    });\n  };\n\n  Chartist.projectPoint = function (chartRect, bounds, data, index) {\n    return {\n      x: chartRect.x1 + chartRect.width() / data.length * index,\n      y: chartRect.y1 - chartRect.height() * (data[index] - bounds.min) / (bounds.range + bounds.step)\n    };\n  };\n\n  // Provides options handling functionality with callback for options changes triggered by responsive options and media query matches\n  // TODO: With multiple media queries the handleMediaChange function is triggered too many times, only need one\n  Chartist.optionsProvider = function (defaultOptions, options, responsiveOptions, optionsChangedCallbackFnc) {\n    var baseOptions = Chartist.extend(Chartist.extend({}, defaultOptions), options),\n      currentOptions,\n      mediaQueryListeners = [],\n      i;\n\n    function applyOptions() {\n      currentOptions = Chartist.extend({}, baseOptions);\n\n      if (responsiveOptions) {\n        for (i = 0; i < responsiveOptions.length; i++) {\n          var mql = window.matchMedia(responsiveOptions[i][0]);\n          if (mql.matches) {\n            currentOptions = Chartist.extend(currentOptions, responsiveOptions[i][1]);\n          }\n        }\n      }\n\n      optionsChangedCallbackFnc(currentOptions);\n      return currentOptions;\n    }\n\n    if (!window.matchMedia) {\n      throw 'window.matchMedia not found! Make sure you\\'re using a polyfill.';\n    } else if (responsiveOptions) {\n\n      for (i = 0; i < responsiveOptions.length; i++) {\n        var mql = window.matchMedia(responsiveOptions[i][0]);\n        mql.addListener(applyOptions);\n        mediaQueryListeners.push(mql);\n      }\n    }\n\n    return applyOptions();\n  };\n\n  // http://schepers.cc/getting-to-the-point\n  Chartist.catmullRom2bezier = function (crp, z) {\n    var d = [];\n    for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n      var p = [\n        {x: +crp[i - 2], y: +crp[i - 1]},\n        {x: +crp[i], y: +crp[i + 1]},\n        {x: +crp[i + 2], y: +crp[i + 3]},\n        {x: +crp[i + 4], y: +crp[i + 5]}\n      ];\n      if (z) {\n        if (!i) {\n          p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n        } else if (iLen - 4 === i) {\n          p[3] = {x: +crp[0], y: +crp[1]};\n        } else if (iLen - 2 === i) {\n          p[2] = {x: +crp[0], y: +crp[1]};\n          p[3] = {x: +crp[2], y: +crp[3]};\n        }\n      } else {\n        if (iLen - 4 === i) {\n          p[3] = p[2];\n        } else if (!i) {\n          p[0] = {x: +crp[i], y: +crp[i + 1]};\n        }\n      }\n      d.push(\n        [\n          (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n          (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n          (p[1].x + 6 * p[2].x - p[3].x) / 6,\n          (p[1].y + 6 * p[2].y - p[3].y) / 6,\n          p[2].x,\n          p[2].y\n        ]\n      );\n    }\n\n    return d;\n  };\n\n}(document, window));","// Chartist line chart\n(function (document, window, Chartist, undefined) {\n  'use strict';\n  Chartist.Line = Chartist.Line || function (query, data, options, responsiveOptions) {\n\n    var defaultOptions = {\n        axisX: {\n          offset: 10,\n          showLabel: true,\n          showGrid: true,\n          labelInterpolationFnc: Chartist.noop\n        },\n        axisY: {\n          offset: 15,\n          showLabel: true,\n          showGrid: true,\n          labelAlign: 'right',\n          labelInterpolationFnc: Chartist.noop,\n          scaleMinSpace: 30\n        },\n        width: undefined,\n        height: undefined,\n        showLine: true,\n        showPoint: true,\n        lineSmooth: true,\n        low: undefined,\n        high: undefined,\n        chartPadding: 5,\n        classNames: {\n          label: 'ct-label',\n          series: 'ct-series',\n          line: 'ct-line',\n          point: 'ct-point',\n          grid: 'ct-grid',\n          vertical: 'ct-vertical',\n          horizontal: 'ct-horizontal'\n        }\n      },\n      currentOptions,\n      draw;\n\n    function createChart(options) {\n      var xAxisOffset,\n        yAxisOffset,\n        seriesGroups = [],\n        bounds,\n        normalizedData = Chartist.normalizeDataArray(Chartist.getDataArray(data), data.labels.length);\n\n      // Create new draw object\n      draw = Chartist.createDraw(query, options.width, options.height);\n\n      // initialize bounds\n      bounds = Chartist.getBounds(draw, normalizedData, options);\n\n      xAxisOffset = options.axisX.offset;\n      if (options.axisX.showLabel) {\n        xAxisOffset += Chartist.calculateLabelOffset(\n          draw,\n          data.labels,\n          [options.classNames.label, options.classNames.horizontal].join(' '),\n          options.axisX.labelInterpolationFnc,\n          Chartist.getHeight\n        );\n      }\n\n      yAxisOffset = options.axisY.offset;\n      if (options.axisY.showLabel) {\n        yAxisOffset += Chartist.calculateLabelOffset(\n          draw,\n          bounds.values,\n          [options.classNames.label, options.classNames.horizontal].join(' '),\n          options.axisY.labelInterpolationFnc,\n          Chartist.getWidth\n        );\n      }\n\n      var chartRect = Chartist.createChartRect(draw, options, xAxisOffset, yAxisOffset);\n      // Start drawing\n      var labels = draw.group(),\n        grid = draw.group();\n\n      Chartist.createXAxis(chartRect, data, grid, labels, options);\n      Chartist.createYAxis(chartRect, bounds, grid, labels, yAxisOffset, options);\n\n      // Draw the series\n      // initialize series groups\n      for (var i = 0; i < data.series.length; i++) {\n        seriesGroups[i] = draw.group();\n        // Use series class from series data or if not set generate one\n        seriesGroups[i].addClass(options.classNames.series + ' ' +\n          (data.series[i].className || options.classNames.series + '-' + Chartist.alphaNumerate(i)));\n\n        var p = Chartist.projectPoint(chartRect, bounds, normalizedData[i], 0),\n          pathCoordinates = [p.x, p.y],\n          point;\n\n        // First dot we need to add before loop\n        if (options.showPoint) {\n          // Small offset for Firefox to render squares correctly\n          point = seriesGroups[i].line(p.x, p.y, p.x + 0.01, p.y);\n          point.addClass(options.classNames.point);\n        }\n\n        // First point is created, continue with rest\n        for (var j = 1; j < normalizedData[i].length; j++) {\n          p = Chartist.projectPoint(chartRect, bounds, normalizedData[i], j);\n          pathCoordinates.push(p.x, p.y);\n\n          //If we should show points we need to create them now to avoid secondary loop\n          // Small offset for Firefox to render squares correctly\n          if (options.showPoint) {\n            point = seriesGroups[i].line(p.x, p.y, p.x + 0.01, p.y);\n            point.addClass(options.classNames.point);\n          }\n        }\n\n        if (options.showLine) {\n          var svgPathString = 'M' + pathCoordinates[0] + ',' + pathCoordinates[1] + ' ';\n\n          // If smoothed path and path has more than two points then use catmull rom to bezier algorithm\n          if (options.lineSmooth && pathCoordinates.length > 4) {\n\n            var cr = Chartist.catmullRom2bezier(pathCoordinates);\n            for(var k = 0; k < cr.length; k++) {\n              svgPathString += 'C' + cr[k].join();\n            }\n          } else {\n            for(var l = 3; l < pathCoordinates.length; l += 2) {\n              svgPathString += 'L ' + pathCoordinates[l - 1] + ',' + pathCoordinates[l];\n            }\n          }\n\n          var path = seriesGroups[i].path(svgPathString);\n          path.addClass(options.classNames.line);\n        }\n      }\n    }\n\n    // Obtain current options based on matching media queries (if responsive options are given)\n    // This will also register a listener that is re-creating the chart based on media changes\n    currentOptions = Chartist.optionsProvider(defaultOptions, options, responsiveOptions, function (changedOptions) {\n      currentOptions = changedOptions;\n      createChart(currentOptions);\n    });\n\n    // TODO: Currently we need to re-draw the chart on window resize. This is usually very bad and will affect performance.\n    // This is done because we can't work with relative coordinates when drawing the chart because SVG Path does not\n    // work with relative positions yet. We need to check if we can do a viewBox hack to switch to percentage.\n    // See http://mozilla.6506.n7.nabble.com/Specyfing-paths-with-percentages-unit-td247474.html\n    // Update: can be done using the above method tested here: http://codepen.io/gionkunz/pen/KDvLj\n    // The problem is with the label offsets that can't be converted into percentage and affecting the chart container\n    window.addEventListener('resize', function () {\n      createChart(currentOptions);\n    });\n\n    // Public members\n    return {\n      version: Chartist.version,\n      update: function () {\n        createChart(currentOptions);\n      }\n    };\n  };\n}(document, window, window.Chartist));","// Chartist Bar chart\n(function (document, window, Chartist, undefined) {\n  'use strict';\n  Chartist.Bar = Chartist.Bar || function (query, data, options, responsiveOptions) {\n\n    var defaultOptions = {\n        axisX: {\n          offset: 10,\n          showLabel: true,\n          showGrid: true,\n          labelInterpolationFnc: Chartist.noop\n        },\n        axisY: {\n          offset: 15,\n          showLabel: true,\n          showGrid: true,\n          labelAlign: 'right',\n          labelInterpolationFnc: Chartist.noop,\n          scaleMinSpace: 40\n        },\n        width: undefined,\n        height: undefined,\n        high: undefined,\n        low: undefined,\n        chartPadding: 5,\n        seriesBarDistance: 15,\n        classNames: {\n          label: 'ct-label',\n          series: 'ct-series',\n          bar: 'ct-bar',\n          thin: 'ct-thin',\n          thick: 'ct-thick',\n          grid: 'ct-grid',\n          vertical: 'ct-vertical',\n          horizontal: 'ct-horizontal'\n        }\n      },\n      currentOptions,\n      draw;\n\n    function createChart(options) {\n      var xAxisOffset,\n        yAxisOffset,\n        seriesGroups = [],\n        bounds,\n        normalizedData = Chartist.normalizeDataArray(Chartist.getDataArray(data), data.labels.length);\n\n      // Create new SVG.js draw\n      draw = Chartist.createDraw(query, options.width, options.height);\n\n      // initialize bounds\n      bounds = Chartist.getBounds(draw, normalizedData, options, 0);\n\n      xAxisOffset = options.axisX.offset;\n      if (options.axisX.showLabel) {\n        xAxisOffset += Chartist.calculateLabelOffset(\n          draw,\n          data.labels,\n          [options.classNames.label, options.classNames.horizontal].join(' '),\n          options.axisX.labelInterpolationFnc,\n          Chartist.getHeight\n        );\n      }\n\n      yAxisOffset = options.axisY.offset;\n      if (options.axisY.showLabel) {\n        yAxisOffset += Chartist.calculateLabelOffset(\n          draw,\n          bounds.values,\n          [options.classNames.label, options.classNames.horizontal].join(' '),\n          options.axisY.labelInterpolationFnc,\n          Chartist.getWidth\n        );\n      }\n\n      var chartRect = Chartist.createChartRect(draw, options, xAxisOffset, yAxisOffset);\n      // Start drawing\n      var labels = draw.group(),\n        grid = draw.group(),\n        // Projected 0 point\n        zeroPoint = Chartist.projectPoint(chartRect, bounds, [0], 0);\n\n      Chartist.createXAxis(chartRect, data, grid, labels, options);\n      Chartist.createYAxis(chartRect, bounds, grid, labels, yAxisOffset, options);\n\n      // Draw the series\n      // initialize series groups\n      for (var i = 0; i < data.series.length; i++) {\n        // Calculating bi-polar value of index for seriesOffset. For i = 0..4 biPol will be -1.5, -0.5, 0.5, 1.5 etc.\n        var biPol = i - (data.series.length - 1) / 2,\n        // Half of the period with between vertical grid lines used to position bars\n          periodHalfWidth = chartRect.width() / normalizedData[i].length / 2;\n\n        seriesGroups[i] = draw.group();\n        // Use series class from series data or if not set generate one\n        seriesGroups[i].addClass(options.classNames.series + ' ' +\n          (data.series[i].className || options.classNames.series + '-' + Chartist.alphaNumerate(i)));\n\n        for(var j = 0; j < normalizedData[i].length; j++) {\n          var p = Chartist.projectPoint(chartRect, bounds, normalizedData[i], j),\n            bar;\n\n          // Offset to center bar between grid lines and using bi-polar offset for multiple series\n          // TODO: Check if we should really be able to add classes to the series. Should be handles with SASS and semantic / specific selectors\n          p.x += periodHalfWidth + (biPol * options.seriesBarDistance);\n\n          bar = seriesGroups[i].line(p.x, zeroPoint.y, p.x, p.y);\n          bar.addClass(options.classNames.bar + (data.series[i].barClasses ? ' ' + data.series[i].barClasses : ''));\n        }\n      }\n    }\n\n    // Obtain current options based on matching media queries (if responsive options are given)\n    // This will also register a listener that is re-creating the chart based on media changes\n    currentOptions = Chartist.optionsProvider(defaultOptions, options, responsiveOptions, function (changedOptions) {\n      currentOptions = changedOptions;\n      createChart(currentOptions);\n    });\n\n    // TODO: Currently we need to re-draw the chart on window resize. This is usually very bad and will affect performance.\n    // This is done because we can't work with relative coordinates when drawing the chart because SVG Path does not\n    // work with relative positions yet. We need to check if we can do a viewBox hack to switch to percentage.\n    // See http://mozilla.6506.n7.nabble.com/Specyfing-paths-with-percentages-unit-td247474.html\n    // Update: can be done using the above method tested here: http://codepen.io/gionkunz/pen/KDvLj\n    // The problem is with the label offsets that can't be converted into percentage and affecting the chart container\n    window.addEventListener('resize', function () {\n      createChart(currentOptions);\n    });\n\n    // Public members\n    return {\n      version: Chartist.version,\n      update: function () {\n        createChart(currentOptions);\n      }\n    };\n  };\n}(document, window, window.Chartist));","// Chartist line chart\n(function (document, window, Chartist, undefined) {\n  'use strict';\n  Chartist.Pie = Chartist.Pie || function (query, data, options, responsiveOptions) {\n\n    var defaultOptions = {\n        width: undefined,\n        height: undefined,\n        chartPadding: 5,\n        classNames: {\n          series: 'ct-series',\n          slice: 'ct-slice',\n          donut: 'ct-donut'\n        },\n        startAngle: 0,\n        total: undefined,\n        donut: false,\n        donutWidth: 60\n      },\n      currentOptions,\n      draw;\n\n    function createChart(options) {\n      var seriesGroups = [],\n        chartRect,\n        radius,\n        totalDataSum,\n        startAngle = options.startAngle,\n        dataArray = Chartist.getDataArray(data);\n\n      // Create SVG.js draw\n      draw = Chartist.createDraw(query, options.width, options.height);\n      // Calculate charting rect\n      chartRect = Chartist.createChartRect(draw, options, 0, 0);\n      // Get biggest circle radius possible within chartRect\n      radius = Math.min(chartRect.width() / 2, chartRect.height() / 2);\n      // Calculate total of all series to get reference value or use total reference from optional options\n      totalDataSum = options.total || dataArray.reduce(function(previousValue, currentValue) {\n        return previousValue + currentValue;\n      }, 0);\n\n      // If this is a donut chart we need to adjust our radius to enable strokes to be drawn inside\n      // Unfortunately this is not possible with the current SVG Spec\n      // See this proposal for more details: http://lists.w3.org/Archives/Public/www-svg/2003Oct/0000.html\n      radius -= options.donut ? options.donutWidth / 2  : 0;\n\n      // Calculate end angle based on total sum and current data value and offset with padding\n      var center = {\n        x: chartRect.x1 + chartRect.width() / 2,\n        y: chartRect.y2 + chartRect.height() / 2\n      };\n\n      // Draw the series\n      // initialize series groups\n      for (var i = 0; i < data.series.length; i++) {\n        seriesGroups[i] = draw.group();\n        // Use series class from series data or if not set generate one\n        seriesGroups[i].addClass(options.classNames.series + ' ' +\n          (data.series[i].className || options.classNames.series + '-' + Chartist.alphaNumerate(i)));\n\n        var endAngle = startAngle + dataArray[i] / totalDataSum * 360;\n        // If we need to draw the arc for all 360 degrees we need to add a hack where we close the circle\n        // with Z and use 359.99 degrees\n        if(endAngle - startAngle === 360) {\n          endAngle -= 0.01;\n        }\n\n        var start = Chartist.polarToCartesian(center.x, center.y, radius, startAngle - (i === 0 ? 0 : 0.2)),\n        end = Chartist.polarToCartesian(center.x, center.y, radius, endAngle),\n        arcSweep = endAngle - startAngle <= 180 ? '0' : '1',\n        d =  [\n          // Start at the end point from the cartesian coordinates\n          'M', end.x, end.y,\n          // Draw arc\n          'A', radius, radius, 0, arcSweep, 0, start.x, start.y\n        ];\n\n        // If regular pie chart (no donut) we add a line to the center of the circle for completing the pie\n        if(options.donut === false) {\n          d.push('L', center.x, center.y);\n        }\n\n        // Create the SVG path with snap\n        var path = seriesGroups[i].path(d.join(' '));\n\n        // If this is a donut chart we add the donut class, otherwise just a regular slice\n        path.addClass(options.classNames.slice + (options.donut ? ' ' + options.classNames.donut : ''));\n\n        if(options.donut === true) {\n          path.attr({\n            'style': 'stroke-width: ' + (+options.donutWidth) + 'px'\n          });\n        }\n\n        // Set next startAngle to current endAngle. Use slight offset so there are no transparent hairline issues\n        // (except for last slice)\n        startAngle = endAngle;\n      }\n    }\n\n    // Obtain current options based on matching media queries (if responsive options are given)\n    // This will also register a listener that is re-creating the chart based on media changes\n    currentOptions = Chartist.optionsProvider(defaultOptions, options, responsiveOptions, function (changedOptions) {\n      currentOptions = changedOptions;\n      createChart(currentOptions);\n    });\n\n    // TODO: Currently we need to re-draw the chart on window resize. This is usually very bad and will affect performance.\n    // This is done because we can't work with relative coordinates when drawing the chart because SVG Path does not\n    // work with relative positions yet. We need to check if we can do a viewBox hack to switch to percentage.\n    // See http://mozilla.6506.n7.nabble.com/Specyfing-paths-with-percentages-unit-td247474.html\n    // Update: can be done using the above method tested here: http://codepen.io/gionkunz/pen/KDvLj\n    // The problem is with the label offsets that can't be converted into percentage and affecting the chart container\n    window.addEventListener('resize', function () {\n      createChart(currentOptions);\n    });\n\n    // Public members\n    return {\n      version: Chartist.version,\n      update: function () {\n        createChart(currentOptions);\n      }\n    };\n  };\n}(document, window, window.Chartist));"]}