{"version":3,"file":"chartist.min.js","sources":["../source/scripts/chartist.core.js","../source/scripts/chartist.line.js","../source/scripts/chartist.bar.js","../source/scripts/chartist.pie.js"],"names":["document","window","undefined","Chartist","version","noop","n","alphaNumerate","String","fromCharCode","extend","target","source","prop","each","array","callback","i","length","value","call","getHeight","svgElement","clientHeight","Math","round","getBBox","height","parentNode","getWidth","clientWidth","width","createDraw","query","draw","container","nodeType","querySelector","__ctDraw","attr","clear","SVG","size","getDataArray","data","series","normalizeDataArray","dataArray","j","orderOfMagnitude","floor","log","abs","LN10","projectLength","bounds","options","availableHeight","getAvailableHeight","range","node","chartPadding","axisX","offset","getHighLow","highLow","high","Number","MIN_VALUE","low","MAX_VALUE","getBounds","newMin","newMax","valueRange","oom","min","pow","max","ceil","step","numberOfSteps","axisY","scaleMinSpace","values","push","calculateLabelOffset","labelClass","labelInterpolationFnc","offsetFnc","interpolated","label","plain","font-family","dx","dy","addClass","remove","interpolateData","index","interpolatedValue","polarToCartesian","centerX","centerY","radius","angleInDegrees","angleInRadians","PI","x","cos","y","sin","createChartRect","xAxisOffset","yAxisOffset","x1","y1","x2","y2","this","createXAxis","chartRect","grid","labels","pos","showGrid","line","classNames","horizontal","join","showLabel","createYAxis","vertical","labelAlign","text-anchor","projectPoint","optionsProvider","defaultOptions","responsiveOptions","optionsChangedCallbackFnc","applyOptions","currentOptions","baseOptions","mql","matchMedia","matches","mediaQueryListeners","addListener","catmullRom2bezier","crp","z","d","iLen","p","Line","createChart","seriesGroups","group","className","point","pathCoordinates","showPoint","showLine","svgPathString","lineSmooth","cr","k","l","path","changedOptions","addEventListener","update","Bar","biPol","periodHalfWidth","bar","seriesBarDistance","barClasses","thin","thick","Pie","totalDataSum","startAngle","total","reduce","previousValue","currentValue","donut","donutWidth","center","endAngle","start","end","arcSweep","slice","style"],"mappings":"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","sourcesContent":["(function (document, window, undefined) {\n  'use strict';\n\n  // Export chartist namespace\n  var Chartist = window.Chartist = window.Chartist || {};\n\n  Chartist.version = '0.1.3';\n\n  // Helps to simplify functional style code\n  Chartist.noop = function (n) {\n    return n;\n  };\n\n  // Generates a-z from number\n  Chartist.alphaNumerate = function (n) {\n    // Limit to a-z\n    return String.fromCharCode(97 + n % 26);\n  };\n\n  // Simple recursive object extend\n  Chartist.extend = function (target, source) {\n    target = target || {};\n    for (var prop in source) {\n      if (typeof source[prop] === 'object') {\n        target[prop] = Chartist.extend(target[prop], source[prop]);\n      } else {\n        target[prop] = source[prop];\n      }\n    }\n    return target;\n  };\n\n  // Simple array each function\n  // TODO: Use Array forEach as browser support allows (IE 9+)\n  Chartist.each = function (array, callback) {\n    for (var i = 0; i < array.length; i++) {\n      var value = callback.call(array[i], i, array[i]);\n\n      if (value === false) {\n        break;\n      }\n    }\n  };\n\n  // Get element height / width with fallback to svg BoundingBox or parent container dimensions\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=530985\n  Chartist.getHeight = function (svgElement) {\n    return svgElement.clientHeight || Math.round(svgElement.getBBox().height) || svgElement.parentNode.clientHeight;\n  };\n\n  Chartist.getWidth = function (svgElement) {\n    return svgElement.clientWidth || Math.round(svgElement.getBBox().width) || svgElement.parentNode.clientWidth;\n  };\n\n  // Create Chartist.js container and instantiate SVG.js draw\n  Chartist.createDraw = function (query, width, height) {\n    // Get dom object from query or if already dom object just use it\n    var container = query.nodeType ? query : document.querySelector(query),\n      draw;\n\n    // If container was not found we throw up\n    if (!container) {\n      throw 'Container node with selector \"' + query + '\" not found';\n    }\n\n    // If already contains draw we clear it, set width / height and return\n    if (container.__ctDraw !== undefined) {\n      draw = container.__ctDraw.attr({\n        width: width || '100%',\n        height: height || '100%'\n      });\n      // Clear the draw if its already used before so we start fresh\n      draw.clear();\n\n    } else {\n      // Create Snap paper with width and height or use 100% as default\n      draw = SVG(container).size(width || '100%', height || '100%');\n      if (!draw) {\n        throw 'Could not instantiate SVG.js!';\n      }\n\n      // Set draw in DOM element so we have a trace for later\n      container.__ctDraw = draw;\n    }\n\n    return draw;\n  };\n\n  // Convert data series into plain array\n  Chartist.getDataArray = function (data) {\n    var array = [];\n\n    for (var i = 0; i < data.series.length; i++) {\n      array[i] = data.series[i].data;\n    }\n\n    return array;\n  };\n\n  // Add missing values at the end of the arrays\n  Chartist.normalizeDataArray = function (dataArray, length) {\n    for (var i = 0; i < dataArray.length; i++) {\n      if (dataArray[i].length === length) {\n        continue;\n      }\n\n      for (var j = dataArray[i].length; j < length; j++) {\n        dataArray[i][j] = 0;\n      }\n    }\n\n    return dataArray;\n  };\n\n  Chartist.orderOfMagnitude = function (value) {\n    return Math.floor(Math.log(Math.abs(value)) / Math.LN10);\n  };\n\n  Chartist.projectLength = function (draw, length, bounds, options) {\n    var availableHeight = Chartist.getAvailableHeight(draw, options);\n    return (length / bounds.range * availableHeight);\n  };\n\n  Chartist.getAvailableHeight = function (draw, options) {\n    return Chartist.getHeight(draw.node) - (options.chartPadding * 2) - options.axisX.offset;\n  };\n\n  // Get highest and lowest value of data array\n  Chartist.getHighLow = function (dataArray) {\n    var i,\n      j,\n      highLow = {\n        high: Number.MIN_VALUE,\n        low: Number.MAX_VALUE\n      };\n\n    for (i = 0; i < dataArray.length; i++) {\n      for (j = 0; j < dataArray[i].length; j++) {\n        if (dataArray[i][j] > highLow.high) {\n          highLow.high = dataArray[i][j];\n        }\n\n        if (dataArray[i][j] < highLow.low) {\n          highLow.low = dataArray[i][j];\n        }\n      }\n    }\n\n    return highLow;\n  };\n\n  // Find the highest and lowest values in a two dimensional array and calculate scale based on order of magnitude\n  Chartist.getBounds = function (draw, dataArray, options, high, low) {\n    var i,\n      newMin,\n      newMax,\n      bounds = Chartist.getHighLow(dataArray);\n\n    // Overrides of high / low from settings\n    bounds.high = options.high || (options.high === 0 ? 0 : bounds.high);\n    bounds.low = options.low || (options.low === 0 ? 0 : bounds.low);\n\n    // Overrides of high / low from function call (highest priority)\n    bounds.high = high || (high === 0 ? 0 : bounds.high);\n    bounds.low = low || (low === 0 ? 0 : bounds.low);\n\n    bounds.valueRange = bounds.high - bounds.low;\n    bounds.oom = Chartist.orderOfMagnitude(bounds.valueRange);\n    bounds.min = Math.floor(bounds.low / Math.pow(10, bounds.oom)) * Math.pow(10, bounds.oom);\n    bounds.max = Math.ceil(bounds.high / Math.pow(10, bounds.oom)) * Math.pow(10, bounds.oom);\n    bounds.range = bounds.max - bounds.min;\n    bounds.step = Math.pow(10, bounds.oom);\n    bounds.numberOfSteps = Math.round(bounds.range / bounds.step);\n\n    // Optimize scale step by checking if subdivision is possible based on horizontalGridMinSpace\n    while (true) {\n      var length = Chartist.projectLength(draw, bounds.step / 2, bounds, options);\n      if (length >= options.axisY.scaleMinSpace) {\n        bounds.step /= 2;\n      } else {\n        break;\n      }\n    }\n\n    // Narrow min and max based on new step\n    newMin = bounds.min;\n    newMax = bounds.max;\n    for (i = bounds.min; i <= bounds.max; i += bounds.step) {\n      if (i + bounds.step < bounds.low) {\n        newMin += bounds.step;\n      }\n\n      if (i - bounds.step > bounds.high) {\n        newMax -= bounds.step;\n      }\n    }\n    bounds.min = newMin;\n    bounds.max = newMax;\n    bounds.range = bounds.max - bounds.min;\n\n    bounds.values = [];\n    for (i = bounds.min; i <= bounds.max; i += bounds.step) {\n      bounds.values.push(i);\n    }\n\n    return bounds;\n  };\n\n  Chartist.calculateLabelOffset = function (draw, data, labelClass, labelInterpolationFnc, offsetFnc) {\n    var offset = 0;\n    for (var i = 0; i < data.length; i++) {\n      // If interpolation function returns falsy value we skipp this label\n      var interpolated = labelInterpolationFnc(data[i], i);\n      if (!interpolated && interpolated !== 0) {\n        continue;\n      }\n\n      var label = draw.plain('' + interpolated);\n      label.attr({\n        'font-family': null\n      });\n      //TODO: Check if needed\n      label.dx(0);\n      label.dy(0);\n      label.addClass(labelClass);\n\n      // Check if this is the largest label and update offset\n      offset = Math.max(offset, offsetFnc(label.node));\n      // Remove label after offset Calculation\n      label.remove();\n    }\n\n    return offset;\n  };\n\n  // Used to iterate over array, interpolate using a interpolation function and executing callback (used for rendering)\n  Chartist.interpolateData = function (data, labelInterpolationFnc, callback) {\n    for (var index = 0; index < data.length; index++) {\n      // If interpolation function returns falsy value we skipp this label\n      var interpolatedValue = labelInterpolationFnc(data[index], index);\n      if (!interpolatedValue && interpolatedValue !== 0) {\n        continue;\n      }\n\n      callback(data, index, interpolatedValue);\n    }\n  };\n\n  Chartist.polarToCartesian = function (centerX, centerY, radius, angleInDegrees) {\n    var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;\n\n    return {\n      x: centerX + (radius * Math.cos(angleInRadians)),\n      y: centerY + (radius * Math.sin(angleInRadians))\n    };\n  };\n\n  // Initialize chart drawing rectangle (area where chart is drawn) x1,y1 = bottom left / x2,y2 = top right\n  Chartist.createChartRect = function (draw, options, xAxisOffset, yAxisOffset) {\n    return {\n      x1: options.chartPadding + yAxisOffset,\n      y1: (options.height || Chartist.getHeight(draw.node)) - options.chartPadding - xAxisOffset,\n      x2: (options.width || Chartist.getWidth(draw.node)) - options.chartPadding,\n      y2: options.chartPadding,\n      width: function () {\n        return this.x2 - this.x1;\n      },\n      height: function () {\n        return this.y1 - this.y2;\n      }\n    };\n  };\n\n  Chartist.createXAxis = function (chartRect, data, grid, labels, options) {\n    // Create X-Axis\n    Chartist.each(data.labels, function (index, value) {\n      var interpolatedValue = options.axisX.labelInterpolationFnc(value, index),\n        pos = chartRect.x1 + chartRect.width() / data.labels.length * index;\n\n      // If interpolated value returns falsey (except 0) we don't draw the grid line\n      if (!interpolatedValue && interpolatedValue !== 0) {\n        return;\n      }\n\n      if (options.axisX.showGrid) {\n        var line = grid.line(pos, chartRect.y1, pos, chartRect.y2);\n        line.addClass([options.classNames.grid, options.classNames.horizontal].join(' '));\n      }\n\n      if (options.axisX.showLabel) {\n        // Use config offset for setting labels of\n        var label = labels.plain('' + interpolatedValue);\n        label.attr({\n          'font-family': null\n        });\n        label.dx(pos + 2);\n\n        label.addClass([options.classNames.label, options.classNames.horizontal].join(' '));\n\n        // TODO: should use 'alignment-baseline': 'hanging' but not supported in firefox. Instead using calculated height to offset y pos\n        label.dy(chartRect.y1 + Chartist.getHeight(label.node) + options.axisX.offset);\n      }\n    });\n  };\n\n  Chartist.createYAxis = function (chartRect, bounds, grid, labels, offset, options) {\n    // Create Y-Axis\n    Chartist.each(bounds.values, function (index, value) {\n      var interpolatedValue = options.axisY.labelInterpolationFnc(value, index),\n        pos = chartRect.y1 - chartRect.height() / bounds.values.length * index;\n\n      // If interpolated value returns falsey (except 0) we don't draw the grid line\n      if (!interpolatedValue && interpolatedValue !== 0) {\n        return;\n      }\n\n      if (options.axisY.showGrid) {\n        var line = grid.line(chartRect.x1, pos, chartRect.x2, pos);\n        line.addClass(options.classNames.grid + ' ' + options.classNames.vertical);\n      }\n\n      if (options.axisY.showLabel) {\n        // Position later\n        //TODO: make padding of 2px configurable\n        //TODO: Check for refactoring\n        var label = labels.plain('' + interpolatedValue);\n        // Reset defaults\n        label.attr({\n          'font-family': null\n        });\n        label.dx(options.axisY.labelAlign === 'right' ? offset - options.axisY.offset + options.chartPadding : options.chartPadding);\n        label.dy(pos - 2);\n        label.addClass(options.classNames.label + ' ' + options.classNames.vertical);\n\n        // Set text-anchor based on alignment\n        label.attr({\n          'text-anchor': options.axisY.labelAlign === 'right' ? 'end' : 'start'\n        });\n      }\n    });\n  };\n\n  Chartist.projectPoint = function (chartRect, bounds, data, index) {\n    return {\n      x: chartRect.x1 + chartRect.width() / data.length * index,\n      y: chartRect.y1 - chartRect.height() * (data[index] - bounds.min) / (bounds.range + bounds.step)\n    };\n  };\n\n  // Provides options handling functionality with callback for options changes triggered by responsive options and media query matches\n  // TODO: With multiple media queries the handleMediaChange function is triggered too many times, only need one\n  Chartist.optionsProvider = function (defaultOptions, options, responsiveOptions, optionsChangedCallbackFnc) {\n    var baseOptions = Chartist.extend(Chartist.extend({}, defaultOptions), options),\n      currentOptions,\n      mediaQueryListeners = [],\n      i;\n\n    function applyOptions() {\n      currentOptions = Chartist.extend({}, baseOptions);\n\n      if (responsiveOptions) {\n        for (i = 0; i < responsiveOptions.length; i++) {\n          var mql = window.matchMedia(responsiveOptions[i][0]);\n          if (mql.matches) {\n            currentOptions = Chartist.extend(currentOptions, responsiveOptions[i][1]);\n          }\n        }\n      }\n\n      optionsChangedCallbackFnc(currentOptions);\n      return currentOptions;\n    }\n\n    if (!window.matchMedia) {\n      throw 'window.matchMedia not found! Make sure you\\'re using a polyfill.';\n    } else if (responsiveOptions) {\n\n      for (i = 0; i < responsiveOptions.length; i++) {\n        var mql = window.matchMedia(responsiveOptions[i][0]);\n        mql.addListener(applyOptions);\n        mediaQueryListeners.push(mql);\n      }\n    }\n\n    return applyOptions();\n  };\n\n  // http://schepers.cc/getting-to-the-point\n  Chartist.catmullRom2bezier = function (crp, z) {\n    var d = [];\n    for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n      var p = [\n        {x: +crp[i - 2], y: +crp[i - 1]},\n        {x: +crp[i], y: +crp[i + 1]},\n        {x: +crp[i + 2], y: +crp[i + 3]},\n        {x: +crp[i + 4], y: +crp[i + 5]}\n      ];\n      if (z) {\n        if (!i) {\n          p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n        } else if (iLen - 4 === i) {\n          p[3] = {x: +crp[0], y: +crp[1]};\n        } else if (iLen - 2 === i) {\n          p[2] = {x: +crp[0], y: +crp[1]};\n          p[3] = {x: +crp[2], y: +crp[3]};\n        }\n      } else {\n        if (iLen - 4 === i) {\n          p[3] = p[2];\n        } else if (!i) {\n          p[0] = {x: +crp[i], y: +crp[i + 1]};\n        }\n      }\n      d.push(\n        [\n          (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n          (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n          (p[1].x + 6 * p[2].x - p[3].x) / 6,\n          (p[1].y + 6 * p[2].y - p[3].y) / 6,\n          p[2].x,\n          p[2].y\n        ]\n      );\n    }\n\n    return d;\n  };\n\n}(document, window));","// Chartist line chart\n(function (document, window, Chartist, undefined) {\n  'use strict';\n  Chartist.Line = Chartist.Line || function (query, data, options, responsiveOptions) {\n\n    var defaultOptions = {\n        axisX: {\n          offset: 10,\n          showLabel: true,\n          showGrid: true,\n          labelInterpolationFnc: Chartist.noop\n        },\n        axisY: {\n          offset: 15,\n          showLabel: true,\n          showGrid: true,\n          labelAlign: 'right',\n          labelInterpolationFnc: Chartist.noop,\n          scaleMinSpace: 30\n        },\n        width: undefined,\n        height: undefined,\n        showLine: true,\n        showPoint: true,\n        lineSmooth: true,\n        chartPadding: 5,\n        classNames: {\n          label: 'ct-label',\n          series: 'ct-series',\n          line: 'ct-line',\n          point: 'ct-point',\n          grid: 'ct-grid',\n          vertical: 'ct-vertical',\n          horizontal: 'ct-horizontal'\n        }\n      },\n      currentOptions,\n      draw,\n      dataArray = Chartist.normalizeDataArray(Chartist.getDataArray(data), data.labels.length);\n\n    function createChart(options) {\n      var xAxisOffset,\n        yAxisOffset,\n        seriesGroups = [],\n        bounds;\n\n      // Create new draw object\n      draw = Chartist.createDraw(query, options.width, options.height);\n\n      // initialize bounds\n      bounds = Chartist.getBounds(draw, dataArray, options);\n\n      xAxisOffset = options.axisX.offset;\n      if (options.axisX.showLabel) {\n        xAxisOffset += Chartist.calculateLabelOffset(\n          draw,\n          data.labels,\n          [options.classNames.label, options.classNames.horizontal].join(' '),\n          options.axisX.labelInterpolationFnc,\n          Chartist.getHeight\n        );\n      }\n\n      yAxisOffset = options.axisY.offset;\n      if (options.axisY.showLabel) {\n        yAxisOffset += Chartist.calculateLabelOffset(\n          draw,\n          bounds.values,\n          [options.classNames.label, options.classNames.horizontal].join(' '),\n          options.axisY.labelInterpolationFnc,\n          Chartist.getWidth\n        );\n      }\n\n      var chartRect = Chartist.createChartRect(draw, options, xAxisOffset, yAxisOffset);\n      // Start drawing\n      var labels = draw.group(),\n        grid = draw.group();\n\n      Chartist.createXAxis(chartRect, data, grid, labels, options);\n      Chartist.createYAxis(chartRect, bounds, grid, labels, yAxisOffset, options);\n\n      // Draw the series\n      // initialize series groups\n      for (var i = 0; i < data.series.length; i++) {\n        seriesGroups[i] = draw.group();\n        // Use series class from series data or if not set generate one\n        seriesGroups[i].addClass(options.classNames.series + ' ' +\n          (data.series[i].className || options.classNames.series + '-' + Chartist.alphaNumerate(i)));\n\n        var p = Chartist.projectPoint(chartRect, bounds, data.series[i].data, 0),\n          pathCoordinates = [p.x, p.y],\n          point;\n\n        // First dot we need to add before loop\n        if (options.showPoint) {\n          // Small offset for Firefox to render squares correctly\n          point = seriesGroups[i].line(p.x, p.y, p.x + 0.01, p.y);\n          point.addClass(options.classNames.point);\n        }\n\n        // First point is created, continue with rest\n        for (var j = 1; j < data.series[i].data.length; j++) {\n          p = Chartist.projectPoint(chartRect, bounds, data.series[i].data, j);\n          pathCoordinates.push(p.x, p.y);\n\n          //If we should show points we need to create them now to avoid secondary loop\n          // Small offset for Firefox to render squares correctly\n          if (options.showPoint) {\n            point = seriesGroups[i].line(p.x, p.y, p.x + 0.01, p.y);\n            point.addClass(options.classNames.point);\n          }\n        }\n\n        if (options.showLine) {\n          var svgPathString = 'M' + pathCoordinates[0] + ',' + pathCoordinates[1] + ' ';\n\n          if (options.lineSmooth) {\n            // If smoothed path convert catmull rom to bezier paths\n            var cr = Chartist.catmullRom2bezier(pathCoordinates);\n            for(var k = 0; k < cr.length; k++) {\n              svgPathString += 'C' + cr[k].join();\n            }\n          } else {\n            for(var l = 3; l < pathCoordinates.length; l += 2) {\n              svgPathString += 'L ' + pathCoordinates[l - 1] + ',' + pathCoordinates[l];\n            }\n          }\n\n          var path = seriesGroups[i].path(svgPathString);\n          path.addClass(options.classNames.line);\n        }\n      }\n    }\n\n    // Obtain current options based on matching media queries (if responsive options are given)\n    // This will also register a listener that is re-creating the chart based on media changes\n    currentOptions = Chartist.optionsProvider(defaultOptions, options, responsiveOptions, function (changedOptions) {\n      currentOptions = changedOptions;\n      createChart(currentOptions);\n    });\n\n    // TODO: Currently we need to re-draw the chart on window resize. This is usually very bad and will affect performance.\n    // This is done because we can't work with relative coordinates when drawing the chart because SVG Path does not\n    // work with relative positions yet. We need to check if we can do a viewBox hack to switch to percentage.\n    // See http://mozilla.6506.n7.nabble.com/Specyfing-paths-with-percentages-unit-td247474.html\n    // Update: can be done using the above method tested here: http://codepen.io/gionkunz/pen/KDvLj\n    // The problem is with the label offsets that can't be converted into percentage and affecting the chart container\n    window.addEventListener('resize', function () {\n      createChart(currentOptions);\n    });\n\n    // Public members\n    return {\n      version: Chartist.version,\n      update: function () {\n        createChart(currentOptions);\n      }\n    };\n  };\n}(document, window, window.Chartist));","// Chartist Bar chart\n(function (document, window, Chartist, undefined) {\n  'use strict';\n  Chartist.Bar = Chartist.Bar || function (query, data, options, responsiveOptions) {\n\n    var defaultOptions = {\n        axisX: {\n          offset: 10,\n          showLabel: true,\n          showGrid: true,\n          labelInterpolationFnc: Chartist.noop\n        },\n        axisY: {\n          offset: 15,\n          showLabel: true,\n          showGrid: true,\n          labelAlign: 'right',\n          labelInterpolationFnc: Chartist.noop,\n          scaleMinSpace: 40\n        },\n        width: undefined,\n        height: undefined,\n        chartPadding: 5,\n        seriesBarDistance: 15,\n        classNames: {\n          label: 'ct-label',\n          series: 'ct-series',\n          bar: 'ct-bar',\n          thin: 'ct-thin',\n          thick: 'ct-thick',\n          grid: 'ct-grid',\n          vertical: 'ct-vertical',\n          horizontal: 'ct-horizontal'\n        }\n      },\n      currentOptions,\n      draw,\n      dataArray = Chartist.normalizeDataArray(Chartist.getDataArray(data), data.labels.length);\n\n    function createChart(options) {\n      var xAxisOffset,\n        yAxisOffset,\n        seriesGroups = [],\n        bounds;\n\n      // Create new SVG.js draw\n      draw = Chartist.createDraw(query, options.width, options.height);\n\n      // initialize bounds\n      bounds = Chartist.getBounds(draw, dataArray, options, null, 0);\n\n      xAxisOffset = options.axisX.offset;\n      if (options.axisX.showLabel) {\n        xAxisOffset += Chartist.calculateLabelOffset(\n          draw,\n          data.labels,\n          [options.classNames.label, options.classNames.horizontal].join(' '),\n          options.axisX.labelInterpolationFnc,\n          Chartist.getHeight\n        );\n      }\n\n      yAxisOffset = options.axisY.offset;\n      if (options.axisY.showLabel) {\n        yAxisOffset += Chartist.calculateLabelOffset(\n          draw,\n          bounds.values,\n          [options.classNames.label, options.classNames.horizontal].join(' '),\n          options.axisY.labelInterpolationFnc,\n          Chartist.getWidth\n        );\n      }\n\n      var chartRect = Chartist.createChartRect(draw, options, xAxisOffset, yAxisOffset);\n      // Start drawing\n      var labels = draw.group(),\n        grid = draw.group();\n\n      Chartist.createXAxis(chartRect, data, grid, labels, options);\n      Chartist.createYAxis(chartRect, bounds, grid, labels, yAxisOffset, options);\n\n      // Draw the series\n      // initialize series groups\n      for (var i = 0; i < data.series.length; i++) {\n        // Calculating bi-polar value of index for seriesOffset. For i = 0..4 biPol will be -1.5, -0.5, 0.5, 1.5 etc.\n        var biPol = i - (data.series.length - 1) / 2,\n        // Half of the period with between vertical grid lines used to position bars\n          periodHalfWidth = chartRect.width() / data.series[i].data.length / 2;\n\n        seriesGroups[i] = draw.group();\n        // Use series class from series data or if not set generate one\n        seriesGroups[i].addClass(options.classNames.series + ' ' +\n          (data.series[i].className || options.classNames.series + '-' + Chartist.alphaNumerate(i)));\n\n        for(var j = 0; j < data.series[i].data.length; j++) {\n          var p = Chartist.projectPoint(chartRect, bounds, data.series[i].data, j),\n            bar;\n\n          // Offset to center bar between grid lines and using bi-polar offset for multiple series\n          // TODO: Check if we should really be able to add classes to the series. Should be handles with SASS and semantic / specific selectors\n          p.x += periodHalfWidth + (biPol * options.seriesBarDistance);\n\n          bar = seriesGroups[i].line(p.x, chartRect.y1, p.x, p.y);\n          bar.addClass(options.classNames.bar + (data.series[i].barClasses ? ' ' + data.series[i].barClasses : ''));\n        }\n      }\n    }\n\n    // Obtain current options based on matching media queries (if responsive options are given)\n    // This will also register a listener that is re-creating the chart based on media changes\n    currentOptions = Chartist.optionsProvider(defaultOptions, options, responsiveOptions, function (changedOptions) {\n      currentOptions = changedOptions;\n      createChart(currentOptions);\n    });\n\n    // TODO: Currently we need to re-draw the chart on window resize. This is usually very bad and will affect performance.\n    // This is done because we can't work with relative coordinates when drawing the chart because SVG Path does not\n    // work with relative positions yet. We need to check if we can do a viewBox hack to switch to percentage.\n    // See http://mozilla.6506.n7.nabble.com/Specyfing-paths-with-percentages-unit-td247474.html\n    // Update: can be done using the above method tested here: http://codepen.io/gionkunz/pen/KDvLj\n    // The problem is with the label offsets that can't be converted into percentage and affecting the chart container\n    window.addEventListener('resize', function () {\n      createChart(currentOptions);\n    });\n\n    // Public members\n    return {\n      version: Chartist.version,\n      update: function () {\n        createChart(currentOptions);\n      }\n    };\n  };\n}(document, window, window.Chartist));","// Chartist line chart\n(function (document, window, Chartist, undefined) {\n  'use strict';\n  Chartist.Pie = Chartist.Pie || function (query, data, options, responsiveOptions) {\n\n    var defaultOptions = {\n        width: undefined,\n        height: undefined,\n        chartPadding: 5,\n        classNames: {\n          series: 'ct-series',\n          slice: 'ct-slice',\n          donut: 'ct-donut'\n        },\n        startAngle: 0,\n        total: undefined,\n        donut: false,\n        donutWidth: 60\n      },\n      currentOptions,\n      draw,\n      dataArray = Chartist.getDataArray(data);\n\n    function createChart(options) {\n      var seriesGroups = [],\n        chartRect,\n        radius,\n        totalDataSum,\n        startAngle = options.startAngle;\n\n      // Create SVG.js draw\n      draw = Chartist.createDraw(query, options.width, options.height);\n      // Calculate charting rect\n      chartRect = Chartist.createChartRect(draw, options, 0, 0);\n      // Get biggest circle radius possible within chartRect\n      radius = Math.min(chartRect.width() / 2, chartRect.height() / 2);\n      // Calculate total of all series to get reference value or use total reference from optional options\n      totalDataSum = options.total || dataArray.reduce(function(previousValue, currentValue) {\n        return previousValue + currentValue[0];\n      }, 0);\n\n      // If this is a donut chart we need to adjust our radius to enable strokes to be drawn inside\n      // Unfortunately this is not possible with the current SVG Spec\n      // See this proposal for more details: http://lists.w3.org/Archives/Public/www-svg/2003Oct/0000.html\n      radius -= options.donut ? options.donutWidth / 2  : 0;\n\n      // Calculate end angle based on total sum and current data value and offset with padding\n      var center = {\n        x: chartRect.x1 + chartRect.width() / 2,\n        y: chartRect.y2 + chartRect.height() / 2\n      };\n\n      // Draw the series\n      // initialize series groups\n      for (var i = 0; i < data.series.length; i++) {\n        seriesGroups[i] = draw.group();\n        // Use series class from series data or if not set generate one\n        seriesGroups[i].addClass(options.classNames.series + ' ' +\n          (data.series[i].className || options.classNames.series + '-' + Chartist.alphaNumerate(i)));\n\n        var endAngle = startAngle + dataArray[i][0] / totalDataSum * 360;\n        // If we need to draw the arc for all 360 degrees we need to add a hack where we close the circle\n        // with Z and use 359.99 degrees\n        if(endAngle - startAngle === 360) {\n          endAngle -= 0.01;\n        }\n\n        var start = Chartist.polarToCartesian(center.x, center.y, radius, startAngle - (i === 0 ? 0 : 0.2)),\n        end = Chartist.polarToCartesian(center.x, center.y, radius, endAngle),\n        arcSweep = endAngle - startAngle <= 180 ? '0' : '1',\n        d =  [\n          // Start at the end point from the cartesian coordinates\n          'M', end.x, end.y,\n          // Draw arc\n          'A', radius, radius, 0, arcSweep, 0, start.x, start.y\n        ];\n\n        // If regular pie chart (no donut) we add a line to the center of the circle for completing the pie\n        if(options.donut === false) {\n          d.push('L', center.x, center.y);\n        }\n\n        // Create the SVG path with snap\n        var path = seriesGroups[i].path(d.join(' '));\n\n        // If this is a donut chart we add the donut class, otherwise just a regular slice\n        path.addClass(options.classNames.slice + (options.donut ? ' ' + options.classNames.donut : ''));\n\n        if(options.donut === true) {\n          path.attr({\n            'style': 'stroke-width: ' + (+options.donutWidth) + 'px'\n          });\n        }\n\n        // Set next startAngle to current endAngle. Use slight offset so there are no transparent hairline issues\n        // (except for last slice)\n        startAngle = endAngle;\n      }\n    }\n\n    // Obtain current options based on matching media queries (if responsive options are given)\n    // This will also register a listener that is re-creating the chart based on media changes\n    currentOptions = Chartist.optionsProvider(defaultOptions, options, responsiveOptions, function (changedOptions) {\n      currentOptions = changedOptions;\n      createChart(currentOptions);\n    });\n\n    // TODO: Currently we need to re-draw the chart on window resize. This is usually very bad and will affect performance.\n    // This is done because we can't work with relative coordinates when drawing the chart because SVG Path does not\n    // work with relative positions yet. We need to check if we can do a viewBox hack to switch to percentage.\n    // See http://mozilla.6506.n7.nabble.com/Specyfing-paths-with-percentages-unit-td247474.html\n    // Update: can be done using the above method tested here: http://codepen.io/gionkunz/pen/KDvLj\n    // The problem is with the label offsets that can't be converted into percentage and affecting the chart container\n    window.addEventListener('resize', function () {\n      createChart(currentOptions);\n    });\n\n    // Public members\n    return {\n      version: Chartist.version,\n      update: function () {\n        createChart(currentOptions);\n      }\n    };\n  };\n}(document, window, window.Chartist));"]}