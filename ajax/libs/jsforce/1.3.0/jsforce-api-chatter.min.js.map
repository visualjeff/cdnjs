{"version":3,"file":"jsforce-api-chatter.min.js","sources":["jsforce-api-chatter.js"],"names":["e","exports","module","define","amd","o","window","global","self","f","jsforce","modules","api","Chatter","t","n","r","s","u","a","require","i","Error","code","l","call","length",1,"util","_","Promise","conn","this","_conn","prototype","_request","params","callback","test","method","isObject","body","headers","Content-Type","JSON","stringify","url","_normalizeUrl","indexOf","version","request","Request","thenCall","resource","queryParams","Resource","batch","requests","batchRequests","batchDeferreds","forEach","deferred","defer","_promise","promise","push","batchParams","then","res","results","result","statusCode","reject","resolve","chatter","_chatter","_params","richInput","stream","onResolve","onReject","isFunction","qstring","map","keys","name","encodeURIComponent","join","super_","_url","inherits","create","data","retrieve","update","del","../promise",2,"process","Q","apply","arguments","nextTick","err","fail","done","when","reason","all","Deferred","_deferred","_process","q",3,"noop","canSetImmediate","setImmediate","canPost","postMessage","addEventListener","queue","ev","source","stopPropagation","fn","shift","setTimeout","title","browser","env","argv","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","cwd","chdir",4,"definition","bootstrap","ses","ok","makeQ","uncurryThis","value","Object","isStopIteration","exception","object_toString","QReturnValue","makeStackTraceLong","error","hasStacks","stack","STACK_JUMP_SEPARATOR","stacks","p","unshift","concatedStacks","filterStackString","stackString","lines","split","desiredLines","line","isInternalFrame","isNodeFrame","stackLine","getFileNameAndLineNumber","attempt1","exec","Number","attempt2","attempt3","fileNameAndLineNumber","fileName","lineNumber","qFileName","qStartingLine","qEndingLine","captureLine","firstLine","deprecate","alternative","console","warn","isPromise","isPromiseAlike","coerce","fulfill","become","newPromise","resolvedPromise","array_reduce","messages","undefined","message","promiseDispatch","progressListeners","object_create","op","operands","args","array_slice","valueOf","nearerValue","nearer","inspect","state","longStackSupport","substring","notify","progress","progressListener","resolver","TypeError","race","answerPs","len","descriptor","fallback","inspected","fulfilled","rejected","progressed","object","isPending","isFulfilled","isRejected","displayUnhandledReasons","unhandledReasonsDisplayed","Touch","unhandledReasons","logUnhandledReasons","resetUnhandledRejections","unhandledRejections","trackUnhandledRejections","trackRejection","untrackRejection","at","array_indexOf","splice","rejection","get","set","rhs","delete","post","thisp","object_keys","master","isDef","dispatch","spread","async","makeGenerator","continuer","verb","arg","hasES6Generators","generator","errback","bind","spawn","_return","promised","promises","countDown","index","snapshot","allResolved","array_map","allSettled","nodeify","nodeback","flush","head","next","task","domain","enter","isNodeJS","exit","flushing","tail","requestTick","MessageChannel","channel","port1","onmessage","requestPortTick","port2","Function","Array","slice","reduce","basis","collect","Type","object_hasOwnProperty","hasOwnProperty","key","toString","ReturnValue","makeNodeResolver","passByCopy","x","y","that","makePromise","_fulfilled","_rejected","newException","_progressed","newValue","threw","onerror","thenResolve","thenReject","getUnhandledReasons","stopUnhandledRejectionTracking","array","mapply","send","mcall","invoke","fapply","fcall","fbind","concat","regardless","fin","onUnhandledError","timeout","ms","timeoutId","clearTimeout","delay","nfapply","nodeArgs","nfcall","nfbind","denodeify","baseArgs","nbind","bound","nmapply","npost","nsend","nmcall","ninvoke"],"mappings":";CAAC,SAASA,GAAG,GAAG,gBAAiBC,UAAS,mBAAoBC,QAAOA,OAAOD,QAAQD,QAAS,IAAG,kBAAmBG,SAAQA,OAAOC,IAAID,UAAUH,OAAO,CAAC,GAAIK,EAAE,oBAAoBC,QAAOD,EAAEC,OAAO,mBAAoBC,QAAOF,EAAEE,OAAO,mBAAoBC,QAAOH,EAAEG,KAAM,IAAIC,GAAEJ,CAAEI,GAAEA,EAAEC,UAAUD,EAAEC,YAAYD,EAAEA,EAAEE,UAAUF,EAAEE,YAAYF,EAAEA,EAAEG,MAAMH,EAAEG,QAAQH,EAAEI,QAAQb,MAAM,WAAW,GAAIG,EAAsB,OAAO,SAAUH,GAAEc,EAAEC,EAAEC,GAAG,QAASC,GAAEZ,EAAEa,GAAG,IAAIH,EAAEV,GAAG,CAAC,IAAIS,EAAET,GAAG,CAAC,GAAIc,GAAkB,kBAATC,UAAqBA,OAAQ,KAAIF,GAAGC,EAAE,MAAOA,GAAEd,GAAE,EAAI,IAAGgB,EAAE,MAAOA,GAAEhB,GAAE,EAAI,IAAII,GAAE,GAAIa,OAAM,uBAAuBjB,EAAE,IAAK,MAAMI,GAAEc,KAAK,mBAAmBd,EAAE,GAAIe,GAAET,EAAEV,IAAIJ,WAAYa,GAAET,GAAG,GAAGoB,KAAKD,EAAEvB,QAAQ,SAASD,GAAG,GAAIe,GAAED,EAAET,GAAG,GAAGL,EAAG,OAAOiB,GAAEF,EAAEA,EAAEf,IAAIwB,EAAEA,EAAEvB,QAAQD,EAAEc,EAAEC,EAAEC,GAAG,MAAOD,GAAEV,GAAGJ,QAAkD,IAAI,GAA1CoB,GAAkB,kBAATD,UAAqBA,QAAgBf,EAAE,EAAEA,EAAEW,EAAEU,OAAOrB,IAAIY,EAAED,EAAEX,GAAI,OAAOY,KAAKU,GAAG,SAASP,EAAQlB,GAMz2B,GAAI0B,GAAUlB,QAAQU,QAAQ,QAC1BS,EAAUnB,QAAQU,QAAQ,cAC1BU,EAAUV,EAAQ,cAQlBP,EAAUX,EAAOD,QAAU,SAAS8B,GACtCC,KAAKC,MAAQF,EAOflB,GAAQqB,UAAUC,SAAW,SAASC,EAAQC,GAU5C,MATI,sBAAsBC,KAAKF,EAAOG,SAChCV,EAAEW,SAASJ,EAAOK,QACpBL,EAAOM,SACLC,eAAgB,oBAElBP,EAAOK,KAAOG,KAAKC,UAAUT,EAAOK,OAGxCL,EAAOU,IAAMd,KAAKe,cAAcX,EAAOU,KAChCd,KAAKC,MAAME,SAASC,EAAQC,IAOrCxB,EAAQqB,UAAUa,cAAgB,SAASD,GACzC,MAAiC,KAA7BA,EAAIE,QAAQ,cAAmD,IAA7BF,EAAIE,QAAQ,aACzC,mBAAqBhB,KAAKC,MAAMgB,QAAUH,EACxC,qBAAqBR,KAAKQ,GAC5B,iBAAmBA,EACa,IAA9BA,EAAIE,QAAQ,eAAkC,MAAXF,EAAI,GACzC,mBAAqBd,KAAKC,MAAMgB,QAAU,WAAaH,EAEvDA,GAsBXjC,EAAQqB,UAAUgB,QAAU,SAASd,EAAQC,GAC3C,MAAO,IAAIc,GAAQnB,KAAMI,GAAQgB,SAASf,IAU5CxB,EAAQqB,UAAUmB,SAAW,SAASP,EAAKQ,GACzC,MAAO,IAAIC,GAASvB,KAAMc,EAAKQ,IAkBjCzC,EAAQqB,UAAUsB,MAAQ,SAASC,EAAUpB,GAC3C,GACIqB,MAAoBC,IACxB9B,GAAE+B,QAAQH,EAAU,SAASP,GAC3B,GAAIW,GAAW/B,EAAQgC,OACvBZ,GAAQa,SAAWF,EAASG,QAC5BN,EAAcO,KAAKf,EAAQgB,eAC3BP,EAAeM,KAAKJ,IAEtB,IAAIzB,IACFG,OAAQ,OACRO,IAAKd,KAAKe,cAAc,kBACxBN,MACEiB,cAAeA,GAGnB,OAAO1B,MAAKG,SAASC,GAAQ+B,KAAK,SAASC,GASzC,MARAvC,GAAE+B,QAAQQ,EAAIC,QAAS,SAASC,EAAQjD,GACtC,GAAIwC,GAAWF,EAAetC,EAC1BiD,GAAOC,YAAc,IACvBV,EAASW,OAAOF,EAAOA,QAEvBT,EAASY,QAAQH,EAAOA,UAGrBF,IACNhB,SAASf,GAad,IAAIc,GAAU,SAASuB,EAAStC,GAC9BJ,KAAK2C,SAAWD,EAChB1C,KAAK4C,QAAUxC,EACfJ,KAAK+B,SAAW,KAgBlBZ,GAAQjB,UAAUgC,YAAc,WAC9B,GAAI9B,GAASJ,KAAK4C,QACdV,GACF3B,OAAQH,EAAOG,OACfO,IAAKd,KAAK2C,SAAS5B,cAAcX,EAAOU,KAK1C,OAHId,MAAK4C,QAAQnC,OACfyB,EAAYW,UAAY7C,KAAK4C,QAAQnC,MAEhCyB,GASTf,EAAQjB,UAAU8B,QAAU,WAC1B,MAAOhC,MAAK+B,UAAY/B,KAAK2C,SAASxC,SAASH,KAAK4C,UAStDzB,EAAQjB,UAAU4C,OAAS,WACzB,MAAO9C,MAAK2C,SAASxC,SAASH,KAAK4C,SAASE,UAW9C3B,EAAQjB,UAAUiC,KAAO,SAASY,EAAWC,GAC3C,MAAOhD,MAAKgC,UAAUG,KAAKY,EAAWC,IASxC7B,EAAQjB,UAAUkB,SAAW,SAASf,GACpC,MAAOR,GAAEoD,WAAW5C,GAAYL,KAAKgC,UAAUZ,SAASf,GAAYL,KAetE,IAAIuB,GAAW,SAASmB,EAAS5B,EAAKQ,GACpC,GAAIA,EAAa,CACf,GAAI4B,GAAUrD,EAAEsD,IAAItD,EAAEuD,KAAK9B,GAAc,SAAS+B,GAChD,MAAOA,GAAO,IAAMC,mBAAmBhC,EAAY+B,MAClDE,KAAK,IACRzC,KAAQA,EAAIE,QAAQ,KAAO,EAAI,IAAM,KAAOkC,EAE9C3B,EAASiC,OAAO/D,KAAKO,KAAM0C,GAAWnC,OAAQ,MAAOO,IAAKA,IAC1Dd,KAAKyD,KAAO3C,EAGdlB,GAAK8D,SAASnC,EAAUJ,GAUxBI,EAASrB,UAAUyD,OAAS,SAASC,EAAMvD,GACzC,MAAOL,MAAK2C,SAASzB,SACnBX,OAAQ,OACRO,IAAKd,KAAKyD,KACVhD,KAAMmD,IACLxC,SAASf,IAUdkB,EAASrB,UAAU2D,SAAW,SAASxD,GACrC,MAAOL,MAAKoB,SAASf,IAWvBkB,EAASrB,UAAU4D,OAAS,SAASF,EAAMvD,GACzC,MAAOL,MAAK2C,SAASzB,SACnBX,OAAQ,OACRO,IAAKd,KAAKyD,KACVhD,KAAMmD,IACLxC,SAASf,IAiBdkB,EAASrB,UAAU6D,IACnBxC,EAASrB,UAAU,UAAY,SAASG,GACtC,MAAOL,MAAK2C,SAASzB,SACnBX,OAAQ,SACRO,IAAKd,KAAKyD,OACTrC,SAASf,MAGX2D,aAAa,IAAIC,GAAG,SAAS7E,EAAQlB,IACxC,SAAWgG,GAEX,GAAIC,GAAI/E,EAAQ,KACZS,EAAInB,QAAQU,QAAQ,cAAcS,EAWlCC,EAAU,SAASzB,GACrB2B,KAAK+B,SAAWoC,EAAE9F,GAwBpByB,GAAQI,UAAUiC,KAAO,WAEvB,MAAO,IAAIrC,GAAQE,KAAK+B,SAASI,KAAKiC,MAAMpE,KAAK+B,SAAUsC,aAS7DvE,EAAQI,UAAUkB,SAAW,SAASf,GAYpC,MAXIR,GAAEoD,WAAW5C,IACfL,KAAKmC,KAAK,SAASC,GACjB8B,EAAQI,SAAS,WACfjE,EAAS,KAAM+B,MAEhB,SAASmC,GACVL,EAAQI,SAAS,WACfjE,EAASkE,OAIRvE,MASTF,EAAQI,UAAUsE,KAAO,WACvB,MAAO,IAAI1E,GAAQE,KAAK+B,SAASyC,KAAKJ,MAAMpE,KAAK+B,SAAUsC,aAS7DvE,EAAQI,UAAUuE,KAAO,WACvB,MAAO,IAAI3E,GAAQE,KAAK+B,SAAS0C,KAAKL,MAAMpE,KAAK+B,SAAUsC,aAM7DvE,EAAQ4E,KAAO,WACb,MAAO,IAAI5E,GAAQqE,EAAEO,KAAKN,MAAMD,EAAGE,aASrCvE,EAAQ0C,OAAS,SAASmC,GACxB,MAAO,IAAI7E,GAAQqE,EAAE3B,OAAOmC,KAU9B7E,EAAQ8E,IAAM,WACZ,MAAO,IAAI9E,GAAQqE,EAAES,IAAIR,MAAMD,EAAGE,aAQpCvE,EAAQgC,MAAQ,WACd,MAAO,IAAI+C,GASb,IAAIA,GAAW,WACb7E,KAAK8E,UAAYX,EAAErC,QACnB9B,KAAKgC,QAAU,GAAIlC,GAAQE,KAAK8E,UAAU9C,SAO5C6C,GAAS3E,UAAUuC,QAAU,WAC3B,MAAOzC,MAAK8E,UAAUrC,QAAQ2B,MAAMpE,KAAK+B,SAAUsC,YAOrDQ,EAAS3E,UAAUsC,OAAS,WAC1B,MAAOxC,MAAK8E,UAAUtC,OAAO4B,MAAMpE,KAAK+B,SAAUsC,YAMpDnG,EAAOD,QAAU6B,IAEdL,KAAKO,KAAKZ,EAAQ,eAClB2F,SAAW,EAAEC,EAAI,IAAIC,GAAG,SAAS7F,EAAQlB,GA6C5C,QAASgH,MA1CT,GAAIhB,GAAUhG,EAAOD,UAErBiG,GAAQI,SAAW,WACf,GAAIa,GAAoC,mBAAX7G,SAC1BA,OAAO8G,aACNC,EAA4B,mBAAX/G,SAClBA,OAAOgH,aAAehH,OAAOiH,gBAGhC,IAAIJ,EACA,MAAO,UAAU1G,GAAK,MAAOH,QAAO8G,aAAa3G,GAGrD,IAAI4G,EAAS,CACT,GAAIG,KAYJ,OAXAlH,QAAOiH,iBAAiB,UAAW,SAAUE,GACzC,GAAIC,GAASD,EAAGC,MAChB,KAAKA,IAAWpH,QAAqB,OAAXoH,IAAgC,iBAAZD,EAAG7B,OAC7C6B,EAAGE,kBACCH,EAAM9F,OAAS,GAAG,CAClB,GAAIkG,GAAKJ,EAAMK,OACfD,QAGT,GAEI,SAAkBA,GACrBJ,EAAMvD,KAAK2D,GACXtH,OAAOgH,YAAY,eAAgB,MAI3C,MAAO,UAAkBM,GACrBE,WAAWF,EAAI,OAIvB1B,EAAQ6B,MAAQ,UAChB7B,EAAQ8B,SAAU,EAClB9B,EAAQ+B,OACR/B,EAAQgC,QAIRhC,EAAQiC,GAAKjB,EACbhB,EAAQkC,YAAclB,EACtBhB,EAAQmC,KAAOnB,EACfhB,EAAQoC,IAAMpB,EACdhB,EAAQqC,eAAiBrB,EACzBhB,EAAQsC,mBAAqBtB,EAC7BhB,EAAQuC,KAAOvB,EAEfhB,EAAQwC,QAAU,WACd,KAAM,IAAIpH,OAAM,qCAIpB4E,EAAQyC,IAAM,WAAc,MAAO,KACnCzC,EAAQ0C,MAAQ,WACZ,KAAM,IAAItH,OAAM,wCAGduH,GAAG,SAASzH,EAAQlB,EAAOD,IACjC,SAAWiG,IA6BX,SAAW4C,GAUP,GAAyB,kBAAdC,WACPA,UAAU,UAAWD,OAGlB,IAAuB,gBAAZ7I,GACdC,EAAOD,QAAU6I,QAGd,IAAsB,kBAAX3I,IAAyBA,EAAOC,IAC9CD,EAAO2I,OAGJ,IAAmB,mBAARE,KAAqB,CACnC,IAAKA,IAAIC,KACL,MAEAD,KAAIE,MAAQJ,MAKhB3C,GAAI2C,KAGT,WACH,YA4JA,SAASK,GAAY1I,GACjB,MAAO,YACH,MAAOgB,GAAK2E,MAAM3F,EAAG4F,YAiF7B,QAAS7D,GAAS4G,GACd,MAAOA,KAAUC,OAAOD,GAM5B,QAASE,GAAgBC,GACrB,MACmC,2BAA/BC,GAAgBD,IAChBA,YAAqBE,GAmC7B,QAASC,GAAmBC,EAAO3F,GAG/B,GAAI4F,GACA5F,EAAQ6F,OACS,gBAAVF,IACG,OAAVA,GACAA,EAAME,OACwC,KAA9CF,EAAME,MAAM7G,QAAQ8G,IACtB,CAEE,IAAK,GADDC,MACKC,EAAIhG,EAAWgG,EAAGA,EAAIA,EAAEtC,OACzBsC,EAAEH,OACFE,EAAOE,QAAQD,EAAEH,MAGzBE,GAAOE,QAAQN,EAAME,MAErB,IAAIK,GAAiBH,EAAOxE,KAAK,KAAOuE,GAAuB,KAC/DH,GAAME,MAAQM,EAAkBD,IAIxC,QAASC,GAAkBC,GAGvB,IAAK,GAFDC,GAAQD,EAAYE,MAAM,MAC1BC,KACKlJ,EAAI,EAAGA,EAAIgJ,EAAM3I,SAAUL,EAAG,CACnC,GAAImJ,GAAOH,EAAMhJ,EAEZoJ,GAAgBD,IAAUE,EAAYF,KAASA,GAChDD,EAAatG,KAAKuG,GAG1B,MAAOD,GAAahF,KAAK,MAG7B,QAASmF,GAAYC,GACjB,MAA4C,KAArCA,EAAU3H,QAAQ,gBACiB,KAAnC2H,EAAU3H,QAAQ,aAG7B,QAAS4H,GAAyBD,GAG9B,GAAIE,GAAW,gCAAgCC,KAAKH,EACpD,IAAIE,EACA,OAAQA,EAAS,GAAIE,OAAOF,EAAS,IAIzC,IAAIG,GAAW,4BAA4BF,KAAKH,EAChD,IAAIK,EACA,OAAQA,EAAS,GAAID,OAAOC,EAAS,IAIzC,IAAIC,GAAW,iBAAiBH,KAAKH,EACrC,OAAIM,IACQA,EAAS,GAAIF,OAAOE,EAAS,KADzC,OAKJ,QAASR,GAAgBE,GACrB,GAAIO,GAAwBN,EAAyBD,EAErD,KAAKO,EACD,OAAO,CAGX,IAAIC,GAAWD,EAAsB,GACjCE,EAAaF,EAAsB,EAEvC,OAAOC,KAAaE,GAChBD,GAAcE,GACAC,IAAdH,EAKR,QAASI,KACL,GAAK5B,EAIL,IACI,KAAM,IAAItI,OACZ,MAAOtB,GACL,GAAIqK,GAAQrK,EAAE6J,MAAMS,MAAM,MACtBmB,EAAYpB,EAAM,GAAGrH,QAAQ,KAAO,EAAIqH,EAAM,GAAKA,EAAM,GACzDa,EAAwBN,EAAyBa,EACrD,KAAKP,EACD,MAIJ,OADAG,GAAYH,EAAsB,GAC3BA,EAAsB,IAIrC,QAASQ,GAAUrJ,EAAUgD,EAAMsG,GAC/B,MAAO,YAMH,MALuB,mBAAZC,UACiB,kBAAjBA,SAAQC,MACfD,QAAQC,KAAKxG,EAAO,uBAAyBsG,EAChC,YAAa,GAAIrK,OAAM,IAAIuI,OAErCxH,EAAS+D,MAAM/D,EAAUgE,YAYxC,QAASF,GAAEiD,GAIP,MAAI0C,GAAU1C,GACHA,EAIP2C,EAAe3C,GACR4C,EAAO5C,GAEP6C,EAAQ7C,GA2BvB,QAAStF,KA+DL,QAASoI,GAAOC,GACZC,EAAkBD,EAClBnI,EAAQ0D,OAASyE,EAEjBE,EAAaC,EAAU,SAAUC,EAAWC,GACxClG,EAAS,WACL6F,EAAWM,gBAAgBrG,MAAM+F,EAAYK,MAElD,QAEHF,EAAW,OACXI,EAAoB,OAnExB,GAA2CN,GAAvCE,KAAeI,KAEf7I,EAAW8I,GAAc7I,EAAM5B,WAC/B8B,EAAU2I,GAAc7K,EAAQI,UAmCpC,IAjCA8B,EAAQyI,gBAAkB,SAAUhI,EAASmI,EAAIC,GAC7C,GAAIC,GAAOC,EAAY1G,UACnBiG,IACAA,EAASrI,KAAK6I,GACH,SAAPF,GAAiBC,EAAS,IAC1BH,EAAkBzI,KAAK4I,EAAS,KAGpCvG,EAAS,WACL8F,EAAgBK,gBAAgBrG,MAAMgG,EAAiBU,MAMnE9I,EAAQgJ,QAAUtB,EAAU,WACxB,GAAIY,EACA,MAAOtI,EAEX,IAAIiJ,GAAcC,EAAOd,EAIzB,OAHIN,GAAUmB,KACVb,EAAkBa,GAEfA,GACR,UAAW,WAEdjJ,EAAQmJ,QAAU,WACd,MAAKf,GAGEA,EAAgBe,WAFVC,MAAO,YAKpBjH,EAAEkH,kBAAoBzD,EACtB,IACI,KAAM,IAAItI,OACZ,MAAOtB,GAOLgE,EAAQ6F,MAAQ7J,EAAE6J,MAAMyD,UAAUtN,EAAE6J,MAAM7G,QAAQ,MAAQ,GAyDlE,MAnCAa,GAASG,QAAUA,EACnBH,EAASY,QAAU,SAAU2E,GACrBgD,GAIJF,EAAO/F,EAAEiD,KAGbvF,EAASoI,QAAU,SAAU7C,GACrBgD,GAIJF,EAAOD,EAAQ7C,KAEnBvF,EAASW,OAAS,SAAUmC,GACpByF,GAIJF,EAAO1H,EAAOmC,KAElB9C,EAAS0J,OAAS,SAAUC,GACpBpB,GAIJC,EAAaK,EAAmB,SAAUH,EAAWkB,GACjDnH,EAAS,WACLmH,EAAiBD,MAEtB,SAGA3J,EA4BX,QAASG,GAAQ0J,GACb,GAAwB,kBAAbA,GACP,KAAM,IAAIC,WAAU,+BAExB,IAAI9J,GAAWC,GACf,KACI4J,EAAS7J,EAASY,QAASZ,EAASW,OAAQX,EAAS0J,QACvD,MAAO5G,GACL9C,EAASW,OAAOmC,GAEpB,MAAO9C,GAASG,QAgDpB,QAAS4J,GAAKC,GACV,MAAO7J,GAAQ,SAASS,EAASD,GAM7B,IAAK,GAAInD,GAAI,EAAGyM,EAAMD,EAASnM,OAAYoM,EAAJzM,EAASA,IAC5C8E,EAAE0H,EAASxM,IAAI8C,KAAKM,EAASD,KAqBzC,QAAS1C,GAAQiM,EAAYC,EAAUb,GAClB,SAAba,IACAA,EAAW,SAAUpB,GACjB,MAAOpI,GAAO,GAAIlD,OACd,uCAAyCsL,MAIrC,SAAZO,IACAA,EAAU,WACN,OAAQC,MAAO,YAIvB,IAAIpJ,GAAU2I,GAAc7K,EAAQI,UAqBpC,IAnBA8B,EAAQyI,gBAAkB,SAAUhI,EAASmI,EAAIE,GAC7C,GAAIxI,EACJ,KAEQA,EADAyJ,EAAWnB,GACFmB,EAAWnB,GAAIxG,MAAMpC,EAAS8I,GAE9BkB,EAASvM,KAAKuC,EAAS4I,EAAIE,GAE1C,MAAOvD,GACLjF,EAASE,EAAO+E,GAEhB9E,GACAA,EAAQH,IAIhBN,EAAQmJ,QAAUA,EAGdA,EAAS,CACT,GAAIc,GAAYd,GACQ,cAApBc,EAAUb,QACVpJ,EAAQuF,UAAY0E,EAAUtH,QAGlC3C,EAAQgJ,QAAUtB,EAAU,WACxB,GAAIuC,GAAYd,GAChB,OAAwB,YAApBc,EAAUb,OACU,aAApBa,EAAUb,MACHpJ,EAEJiK,EAAU7E,QAIzB,MAAOpF,GA+FX,QAAS0C,GAAK0C,EAAO8E,EAAWC,EAAUC,GACtC,MAAOjI,GAAEiD,GAAOjF,KAAK+J,EAAWC,EAAUC,GA+B9C,QAASlB,GAAO9D,GACZ,GAAI0C,EAAU1C,GAAQ,CAClB,GAAI6E,GAAY7E,EAAM+D,SACtB,IAAwB,cAApBc,EAAUb,MACV,MAAOa,GAAU7E,MAGzB,MAAOA,GAQX,QAAS0C,GAAUuC,GACf,MAAO7L,GAAS6L,IACsB,kBAA3BA,GAAO5B,iBACY,kBAAnB4B,GAAOlB,QAItB,QAASpB,GAAesC,GACpB,MAAO7L,GAAS6L,IAAkC,kBAAhBA,GAAOlK,KAQ7C,QAASmK,GAAUD,GACf,MAAOvC,GAAUuC,IAAsC,YAA3BA,EAAOlB,UAAUC,MAYjD,QAASmB,GAAYF,GACjB,OAAQvC,EAAUuC,IAAsC,cAA3BA,EAAOlB,UAAUC,MAWlD,QAASoB,GAAWH,GAChB,MAAOvC,GAAUuC,IAAsC,aAA3BA,EAAOlB,UAAUC,MAiBjD,QAASqB,KAEAC,IACiB,mBAAXpO,SACNA,OAAOqO,QACRrO,OAAOsL,SAEPA,QAAQC,KAAK,qDACA+C,IAGjBF,IAA4B,EAGhC,QAASG,KACL,IAAK,GAAIxN,GAAI,EAAGA,EAAIuN,GAAiBlN,OAAQL,IAAK,CAC9C,GAAIsF,GAASiI,GAAiBvN,EAC9BuK,SAAQC,KAAK,8BAA+BlF,IAIpD,QAASmI,KACLF,GAAiBlN,OAAS,EAC1BqN,GAAoBrN,OAAS,EAC7BgN,IAA4B,EAEvBM,KACDA,IAA2B,EAKJ,mBAAZ9I,IAA2BA,EAAQiC,IAC1CjC,EAAQiC,GAAG,OAAQ0G,IAK/B,QAASI,GAAejL,EAAS2C,GACxBqI,KAILD,GAAoB9K,KAAKD,GAErB4K,GAAiB3K,KADjB0C,GAAkC,mBAAjBA,GAAOkD,MACFlD,EAAOkD,MAEP,cAAgBlD,GAE1C8H,KAGJ,QAASS,GAAiBlL,GACtB,GAAKgL,GAAL,CAIA,GAAIG,GAAKC,EAAcL,GAAqB/K,EACjC,MAAPmL,IACAJ,GAAoBM,OAAOF,EAAI,GAC/BP,GAAiBS,OAAOF,EAAI,KA4BpC,QAAS3K,GAAOmC,GACZ,GAAI2I,GAAYxN,GACZ4E,KAAQ,SAAUyH,GAKd,MAHIA,IACAe,EAAiBlN,MAEdmM,EAAWA,EAASxH,GAAU3E,OAE1C,WACC,MAAOA,OACR,WACC,OAASoL,MAAO,WAAYzG,OAAQA,IAMxC,OAFAsI,GAAeK,EAAW3I,GAEnB2I,EAQX,QAASrD,GAAQ7C,GACb,MAAOtH,IACH4E,KAAQ,WACJ,MAAO0C,IAEXmG,IAAO,SAAUlK,GACb,MAAO+D,GAAM/D,IAEjBmK,IAAO,SAAUnK,EAAMoK,GACnBrG,EAAM/D,GAAQoK,GAElBC,SAAU,SAAUrK,SACT+D,GAAM/D,IAEjBsK,KAAQ,SAAUtK,EAAMyH,GAGpB,MAAa,QAATzH,GAA0B,SAATA,EACV+D,EAAMhD,MAAM,OAAQ0G,GAEpB1D,EAAM/D,GAAMe,MAAMgD,EAAO0D,IAGxC1G,MAAS,SAAUwJ,EAAO9C,GACtB,MAAO1D,GAAMhD,MAAMwJ,EAAO9C,IAE9B1H,KAAQ,WACJ,MAAOyK,IAAYzG,KAExB,OAAQ,WACP,OAASgE,MAAO,YAAahE,MAAOA,KAS5C,QAAS4C,GAAOhI,GACZ,GAAIH,GAAWC,GAQf,OAPAwC,GAAS,WACL,IACItC,EAAQG,KAAKN,EAASY,QAASZ,EAASW,OAAQX,EAAS0J,QAC3D,MAAOhE,GACL1F,EAASW,OAAO+E,MAGjB1F,EAASG,QAapB,QAAS8L,GAAOzB,GACZ,MAAOvM,IACHiO,MAAS,cACV,SAAkBnD,EAAIE,GACrB,MAAOkD,GAAS3B,EAAQzB,EAAIE,IAC7B,WACC,MAAO3G,GAAEkI,GAAQlB,YAezB,QAAS8C,GAAO7G,EAAO8E,EAAWC,GAC9B,MAAOhI,GAAEiD,GAAO6G,OAAO/B,EAAWC,GAoCtC,QAAS+B,GAAMC,GACX,MAAO,YAGH,QAASC,GAAUC,EAAMC,GACrB,GAAIhM,EACJ,IAAIiM,GAAkB,CAClB,IACIjM,EAASkM,EAAUH,GAAMC,GAC3B,MAAO/G,GACL,MAAO/E,GAAO+E,GAElB,MAAIjF,GAAOmC,KACAnC,EAAO8E,MAEP1C,EAAKpC,EAAO8E,MAAO/G,EAAUoO,GAIxC,IACInM,EAASkM,EAAUH,GAAMC,GAC3B,MAAO/G,GACL,MAAID,GAAgBC,GACTA,EAAUH,MAEV5E,EAAO+E,GAGtB,MAAO7C,GAAKpC,EAAQjC,EAAUoO,GAGtC,GAAID,GAAYL,EAAc/J,MAAMpE,KAAMqE,WACtChE,EAAW+N,EAAUM,KAAKN,EAAW,QACrCK,EAAUL,EAAUM,KAAKN,EAAW,QACxC,OAAO/N,MAYf,QAASsO,GAAMR,GACXhK,EAAEM,KAAKN,EAAE+J,MAAMC,MA6BnB,QAASS,GAAQxH,GACb,KAAM,IAAIK,GAAaL,GAmB3B,QAASyH,GAASxO,GACd,MAAO,YACH,MAAO4N,IAAQjO,KAAM4E,EAAIP,YAAa,SAAU7F,EAAMsM,GAClD,MAAOzK,GAAS+D,MAAM5F,EAAMsM,MAaxC,QAASkD,GAAS3B,EAAQzB,EAAIE,GAC1B,MAAO3G,GAAEkI,GAAQ2B,SAASpD,EAAIE,GAiLlC,QAASlG,GAAIkK,GACT,MAAOpK,GAAKoK,EAAU,SAAUA,GAC5B,GAAIC,GAAY,EACZlN,EAAWC,GA4Bf,OA3BAuI,GAAayE,EAAU,SAAUvE,EAAWvI,EAASgN,GACjD,GAAIC,EAEAnF,GAAU9H,IAC+B,eAAxCiN,EAAWjN,EAAQmJ,WAAWC,MAE/B0D,EAASE,GAASC,EAAS7H,SAEzB2H,EACFrK,EACI1C,EACA,SAAUoF,GACN0H,EAASE,GAAS5H,EACE,MAAd2H,GACFlN,EAASY,QAAQqM,IAGzBjN,EAASW,OACT,SAAUgJ,GACN3J,EAAS0J,QAASyD,MAAOA,EAAO5H,MAAOoE,QAIpD,QACe,IAAduD,GACAlN,EAASY,QAAQqM,GAEdjN,EAASG,UAkBxB,QAASkN,GAAYJ,GACjB,MAAOpK,GAAKoK,EAAU,SAAUA,GAE5B,MADAA,GAAWK,GAAUL,EAAU3K,GACxBO,EAAKE,EAAIuK,GAAUL,EAAU,SAAU9M,GAC1C,MAAO0C,GAAK1C,EAASkD,EAAMA,MAC1B,WACD,MAAO4J,OAanB,QAASM,GAAWN,GAChB,MAAO3K,GAAE2K,GAAUM,aAkDvB,QAAS5D,GAASa,EAAQD,GACtB,MAAOjI,GAAEkI,GAAQlK,KAAK,OAAQ,OAAQiK,GA6R1C,QAASiD,GAAQhD,EAAQiD,GACrB,MAAOnL,GAAEkI,GAAQgD,QAAQC,GAvzD7B,GAAI1H,IAAY,CAChB,KACI,KAAM,IAAItI,OACZ,MAAOtB,GACL4J,IAAc5J,EAAE6J,MAKpB,GACIwB,GAmPA5B,EApPA6B,EAAgBE,IAMhBtE,EAAO,aAIPZ,EAAU,WAQV,QAASiL,KAGL,KAAOC,EAAKC,MAAM,CACdD,EAAOA,EAAKC,IACZ,IAAIC,GAAOF,EAAKE,IAChBF,GAAKE,KAAO,MACZ,IAAIC,GAASH,EAAKG,MAEdA,KACAH,EAAKG,OAAS,OACdA,EAAOC,QAGX,KACIF,IAEF,MAAO1R,GACL,GAAI6R,EAeA,KARIF,IACAA,EAAOG,OAEXhK,WAAWyJ,EAAO,GACdI,GACAA,EAAOC,QAGL5R,CAKN8H,YAAW,WACR,KAAM9H,IACN,GAIP2R,GACAA,EAAOG,OAIfC,GAAW,EAvDf,GAAIP,IAAQE,KAAM,OAAQD,KAAM,MAC5BO,EAAOR,EACPO,GAAW,EACXE,EAAc,OACdJ,GAAW,CAmEf,IAbAvL,EAAW,SAAUoL,GACjBM,EAAOA,EAAKP,MACRC,KAAMA,EACNC,OAAQE,GAAY3L,EAAQyL,OAC5BF,KAAM,MAGLM,IACDA,GAAW,EACXE,MAIe,mBAAZ/L,IAA2BA,EAAQI,SAG1CuL,GAAW,EAEXI,EAAc,WACV/L,EAAQI,SAASiL,QAGlB,IAA4B,kBAAjBnK,cAGV6K,EADkB,mBAAX3R,QACO8G,aAAasJ,KAAKpQ,OAAQiR,GAE1B,WACVnK,aAAamK,QAIlB,IAA8B,mBAAnBW,gBAAgC,CAG9C,GAAIC,GAAU,GAAID,eAGlBC,GAAQC,MAAMC,UAAY,WACtBJ,EAAcK,EACdH,EAAQC,MAAMC,UAAYd,EAC1BA,IAEJ,IAAIe,GAAkB,WAGlBH,EAAQI,MAAMjL,YAAY,GAE9B2K,GAAc,WACVnK,WAAWyJ,EAAO,GAClBe,SAKJL,GAAc,WACVnK,WAAWyJ,EAAO,GAI1B,OAAOjL,MAcP7E,EAAO+Q,SAAS/Q,KAUhBsL,EAAc5D,EAAYsJ,MAAMvQ,UAAUwQ,OAE1CrG,EAAelD,EACfsJ,MAAMvQ,UAAUyQ,QAAU,SAAUtQ,EAAUuQ,GAC1C,GAAI5B,GAAQ,EACRtP,EAASM,KAAKN,MAElB,IAAyB,IAArB2E,UAAU3E,OAGV,OAAG,CACC,GAAIsP,IAAShP,MAAM,CACf4Q,EAAQ5Q,KAAKgP,IACb,OAEJ,KAAMA,GAAStP,EACX,KAAM,IAAIiM,WAKtB,KAAejM,EAARsP,EAAgBA,IAEfA,IAAShP,QACT4Q,EAAQvQ,EAASuQ,EAAO5Q,KAAKgP,GAAQA,GAG7C,OAAO4B,KAIXxD,EAAgBjG,EAChBsJ,MAAMvQ,UAAUc,SAAW,SAAUoG,GAEjC,IAAK,GAAI/H,GAAI,EAAGA,EAAIW,KAAKN,OAAQL,IAC7B,GAAIW,KAAKX,KAAO+H,EACZ,MAAO/H,EAGf,OAAO,KAIX8P,GAAYhI,EACZsJ,MAAMvQ,UAAUiD,KAAO,SAAU9C,EAAUuN,GACvC,GAAIpP,GAAOwB,KACP6Q,IAIJ,OAHAxG,GAAa7L,EAAM,SAAU+L,EAAWnD,EAAO4H,GAC3C6B,EAAQ5O,KAAK5B,EAASZ,KAAKmO,EAAOxG,EAAO4H,EAAOxQ,KACjD,QACIqS,IAIXlG,GAAgBtD,OAAO1D,QAAU,SAAUzD,GAC3C,QAAS4Q,MAET,MADAA,GAAK5Q,UAAYA,EACV,GAAI4Q,IAGXC,GAAwB5J,EAAYE,OAAOnH,UAAU8Q,gBAErDnD,GAAcxG,OAAOjE,MAAQ,SAAUiJ,GACvC,GAAIjJ,KACJ,KAAK,GAAI6N,KAAO5E,GACR0E,GAAsB1E,EAAQ4E,IAC9B7N,EAAKnB,KAAKgP,EAGlB,OAAO7N,IAGPoE,GAAkBL,EAAYE,OAAOnH,UAAUgR,SAoB/CzJ,GADuB,mBAAhB0J,aACQA,YAEA,SAAU/J,GACrBpH,KAAKoH,MAAQA,EAWrB,IAAImH,GACJ,KAEI,GAAIiC,UAAS,8BACbjC,IAAmB,EACrB,MAAOvQ,GACLuQ,IAAmB,EAKvB,GAAIzG,IAAuB,sBAuI3B3D,GAAE1B,QAAU0B,EAMZA,EAAEG,SAAWA,EAKbH,EAAEkH,kBAAmB,EAYrBlH,EAAErC,MAAQA,EAyHVA,EAAM5B,UAAUkR,iBAAmB,WAC/B,GAAI5S,GAAOwB,IACX,OAAO,UAAU2H,EAAOP,GAChBO,EACAnJ,EAAKgE,OAAOmF,GAEZnJ,EAAKiE,QADE4B,UAAU3E,OAAS,EACbqL,EAAY1G,UAAW,GAEvB+C,KAWzBjD,EAAEnC,QAAUA,EAiBZmC,EAAEkN,WAAa,SAAUhF,GAGrB,MAAOA,IAGXvM,EAAQI,UAAUmR,WAAa,WAG3B,MAAOrR,OAYXmE,EAAEZ,KAAO,SAAU+N,EAAGC,GAClB,MAAOpN,GAAEmN,GAAG/N,KAAKgO,IAGrBzR,EAAQI,UAAUqD,KAAO,SAAUiO,GAC/B,MAAOrN,IAAGnE,KAAMwR,IAAOvD,OAAO,SAAUqD,EAAGC,GACvC,GAAID,IAAMC,EAEN,MAAOD,EAEP,MAAM,IAAIhS,OAAM,6BAA+BgS,EAAI,IAAMC,MAUrEpN,EAAEyH,KAAOA,EAcT9L,EAAQI,UAAU0L,KAAO,WACrB,MAAO5L,MAAKmC,KAAKgC,EAAEyH,OAcvBzH,EAAEsN,YAAc3R,EAuDhBA,EAAQI,UAAUgR,SAAW,WACzB,MAAO,oBAGXpR,EAAQI,UAAUiC,KAAO,SAAU+J,EAAWC,EAAUC,GAMpD,QAASsF,GAAWtK,GAChB,IACI,MAA4B,kBAAd8E,GAA2BA,EAAU9E,GAASA,EAC9D,MAAOG,GACL,MAAO/E,GAAO+E,IAItB,QAASoK,GAAUpK,GACf,GAAwB,kBAAb4E,GAAyB,CAChCzE,EAAmBH,EAAW/I,EAC9B,KACI,MAAO2N,GAAS5E,GAClB,MAAOqK,GACL,MAAOpP,GAAOoP,IAGtB,MAAOpP,GAAO+E,GAGlB,QAASsK,GAAYzK,GACjB,MAA6B,kBAAfgF,GAA4BA,EAAWhF,GAASA,EA1BlE,GAAI5I,GAAOwB,KACP6B,EAAWC,IACX2C,GAAO,CAiEX,OAtCAH,GAAS,WACL9F,EAAKiM,gBAAgB,SAAUrD,GACvB3C,IAGJA,GAAO,EAEP5C,EAASY,QAAQiP,EAAWtK,MAC7B,QAAS,SAAUG,GACd9C,IAGJA,GAAO,EAEP5C,EAASY,QAAQkP,EAAUpK,UAKnC/I,EAAKiM,gBAAgB,OAAQ,QAAS,OAAQ,SAAUrD,GACpD,GAAI0K,GACAC,GAAQ,CACZ,KACID,EAAWD,EAAYzK,GACzB,MAAOpJ,GAEL,GADA+T,GAAQ,GACJ5N,EAAE6N,QAGF,KAAMhU,EAFNmG,GAAE6N,QAAQhU,GAMb+T,GACDlQ,EAAS0J,OAAOuG,MAIjBjQ,EAASG,SAmBpBmC,EAAEO,KAAOA,EAKT5E,EAAQI,UAAU+R,YAAc,SAAU7K,GACtC,MAAOpH,MAAKmC,KAAK,WAAc,MAAOiF,MAG1CjD,EAAE8N,YAAc,SAAUjQ,EAASoF,GAC/B,MAAOjD,GAAEnC,GAASiQ,YAAY7K,IAGlCtH,EAAQI,UAAUgS,WAAa,SAAUvN,GACrC,MAAO3E,MAAKmC,KAAK,WAAc,KAAMwC,MAGzCR,EAAE+N,WAAa,SAAUlQ,EAAS2C,GAC9B,MAAOR,GAAEnC,GAASkQ,WAAWvN,IAcjCR,EAAE+G,OAASA,EAeX/G,EAAE2F,UAAYA,EAOd3F,EAAE4F,eAAiBA,EASnB5F,EAAEmI,UAAYA,EAKdxM,EAAQI,UAAUoM,UAAY,WAC1B,MAAgC,YAAzBtM,KAAKmL,UAAUC,OAO1BjH,EAAEoI,YAAcA,EAKhBzM,EAAQI,UAAUqM,YAAc,WAC5B,MAAgC,cAAzBvM,KAAKmL,UAAUC,OAM1BjH,EAAEqI,WAAaA,EAKf1M,EAAQI,UAAUsM,WAAa,WAC3B,MAAgC,aAAzBxM,KAAKmL,UAAUC,MAS1B,IAAIwB,OACAG,MACAL,IAA4B,EAC5BM,IAA2B,CAiE/B7I,GAAE2I,yBAA2BA,EAE7B3I,EAAEgO,oBAAsB,WAEpB,MAAOvF,IAAiB8D,SAG5BvM,EAAEiO,+BAAiC,WAC/BtF,IACuB,mBAAZ5I,IAA2BA,EAAQiC,IAC1CjC,EAAQqC,eAAe,OAAQsG,GAEnCG,IAA2B,GAG/BF,IAQA3I,EAAE3B,OAASA,EA0BX2B,EAAE8F,QAAUA,EA6DZ9F,EAAE2J,OAASA,EAqBX3J,EAAE8J,OAASA,EAKXnO,EAAQI,UAAU+N,OAAS,SAAU/B,EAAWC,GAC5C,MAAOnM,MAAK4E,MAAMzC,KAAK,SAAUkQ,GAC7B,MAAOnG,GAAU9H,MAAM,OAAQiO,IAChClG,IA6BPhI,EAAE+J,MAAQA,EA8CV/J,EAAEwK,MAAQA,EA8BVxK,EAAE,UAAYyK,EAoBdzK,EAAE0K,SAAWA,EAgBb1K,EAAE6J,SAAWA,EAKblO,EAAQI,UAAU8N,SAAW,SAAUpD,EAAIE,GACvC,GAAItM,GAAOwB,KACP6B,EAAWC,GAIf,OAHAwC,GAAS,WACL9F,EAAKiM,gBAAgB5I,EAASY,QAASmI,EAAIE,KAExCjJ,EAASG,SASpBmC,EAAEoJ,IAAM,SAAUlB,EAAQ4E,GACtB,MAAO9M,GAAEkI,GAAQ2B,SAAS,OAAQiD,KAGtCnR,EAAQI,UAAUqN,IAAM,SAAU0D,GAC9B,MAAOjR,MAAKgO,SAAS,OAAQiD,KAUjC9M,EAAEqJ,IAAM,SAAUnB,EAAQ4E,EAAK7J,GAC3B,MAAOjD,GAAEkI,GAAQ2B,SAAS,OAAQiD,EAAK7J,KAG3CtH,EAAQI,UAAUsN,IAAM,SAAUyD,EAAK7J,GACnC,MAAOpH,MAAKgO,SAAS,OAAQiD,EAAK7J,KAStCjD,EAAEJ,IACFI,EAAE,UAAY,SAAUkI,EAAQ4E,GAC5B,MAAO9M,GAAEkI,GAAQ2B,SAAS,UAAWiD,KAGzCnR,EAAQI,UAAU6D,IAClBjE,EAAQI,UAAU,UAAY,SAAU+Q,GACpC,MAAOjR,MAAKgO,SAAS,UAAWiD,KAgBpC9M,EAAEmO,OACFnO,EAAEwJ,KAAO,SAAUtB,EAAQhJ,EAAMyH,GAC7B,MAAO3G,GAAEkI,GAAQ2B,SAAS,QAAS3K,EAAMyH,KAG7ChL,EAAQI,UAAUoS,OAClBxS,EAAQI,UAAUyN,KAAO,SAAUtK,EAAMyH,GACrC,MAAO9K,MAAKgO,SAAS,QAAS3K,EAAMyH,KAUxC3G,EAAEoO,KACFpO,EAAEqO,MACFrO,EAAEsO,OAAS,SAAUpG,EAAQhJ,GACzB,MAAOc,GAAEkI,GAAQ2B,SAAS,QAAS3K,EAAM0H,EAAY1G,UAAW,MAGpEvE,EAAQI,UAAUqS,KAClBzS,EAAQI,UAAUsS,MAClB1S,EAAQI,UAAUuS,OAAS,SAAUpP,GACjC,MAAOrD,MAAKgO,SAAS,QAAS3K,EAAM0H,EAAY1G,UAAW,MAQ/DF,EAAEuO,OAAS,SAAUrG,EAAQvB,GACzB,MAAO3G,GAAEkI,GAAQ2B,SAAS,SAAU,OAAQlD,KAGhDhL,EAAQI,UAAUwS,OAAS,SAAU5H,GACjC,MAAO9K,MAAKgO,SAAS,SAAU,OAAQlD,KAQ3C3G,EAAE,OACFA,EAAEwO,MAAQ,SAAUtG,GAChB,MAAOlI,GAAEkI,GAAQ2B,SAAS,SAAU,OAAQjD,EAAY1G,UAAW,MAGvEvE,EAAQI,UAAUyS,MAAQ,WACtB,MAAO3S,MAAKgO,SAAS,SAAU,OAAQjD,EAAY1G,cASvDF,EAAEyO,MAAQ,SAAUvG,GAChB,GAAIrK,GAAUmC,EAAEkI,GACZvB,EAAOC,EAAY1G,UAAW,EAClC,OAAO,YACH,MAAOrC,GAAQgM,SAAS,SACpBhO,KACA8K,EAAK+H,OAAO9H,EAAY1G,gBAIpCvE,EAAQI,UAAU0S,MAAQ,WACtB,GAAI5Q,GAAUhC,KACV8K,EAAOC,EAAY1G,UACvB,OAAO,YACH,MAAOrC,GAAQgM,SAAS,SACpBhO,KACA8K,EAAK+H,OAAO9H,EAAY1G,gBAWpCF,EAAEf,KAAO,SAAUiJ,GACf,MAAOlI,GAAEkI,GAAQ2B,SAAS,YAG9BlO,EAAQI,UAAUkD,KAAO,WACrB,MAAOpD,MAAKgO,SAAS,YAYzB7J,EAAES,IAAMA,EAoCR9E,EAAQI,UAAU0E,IAAM,WACpB,MAAOA,GAAI5E,OAYfmE,EAAE+K,YAAcxF,EAAUwF,EAAa,cAAe,cAYtDpP,EAAQI,UAAUgP,YAAc,WAC5B,MAAOA,GAAYlP,OAMvBmE,EAAEiL,WAAaA,EAYftP,EAAQI,UAAUkP,WAAa,WAC3B,MAAOpP,MAAKmC,KAAK,SAAU2M,GACvB,MAAOlK,GAAIuK,GAAUL,EAAU,SAAU9M,GAErC,QAAS8Q,KACL,MAAO9Q,GAAQmJ,UAEnB,MAJAnJ,GAAUmC,EAAEnC,GAILA,EAAQG,KAAK2Q,EAAYA,SAc5C3O,EAAEK,KACFL,EAAE,SAAW,SAAUkI,EAAQF,GAC3B,MAAOhI,GAAEkI,GAAQlK,KAAK,OAAQgK,IAGlCrM,EAAQI,UAAUsE,KAClB1E,EAAQI,UAAU,SAAW,SAAUiM,GACnC,MAAOnM,MAAKmC,KAAK,OAAQgK,IAW7BhI,EAAEqH,SAAWA,EAKb1L,EAAQI,UAAUsL,SAAW,SAAUY,GACnC,MAAOpM,MAAKmC,KAAK,OAAQ,OAAQiK,IAcrCjI,EAAE4O,IACF5O,EAAE,WAAa,SAAUkI,EAAQhM,GAC7B,MAAO8D,GAAEkI,GAAQ,WAAWhM,IAGhCP,EAAQI,UAAU6S,IAClBjT,EAAQI,UAAU,WAAa,SAAUG,GAErC,MADAA,GAAW8D,EAAE9D,GACNL,KAAKmC,KAAK,SAAUiF,GACvB,MAAO/G,GAASsS,QAAQxQ,KAAK,WACzB,MAAOiF,MAEZ,SAAUzC,GAET,MAAOtE,GAASsS,QAAQxQ,KAAK,WACzB,KAAMwC,QAWlBR,EAAEM,KAAO,SAAU4H,EAAQH,EAAWC,EAAUX,GAC5C,MAAOrH,GAAEkI,GAAQ5H,KAAKyH,EAAWC,EAAUX,IAG/C1L,EAAQI,UAAUuE,KAAO,SAAUyH,EAAWC,EAAUX,GACpD,GAAIwH,GAAmB,SAAUrL,GAG7BrD,EAAS,WAEL,GADAoD,EAAmBC,EAAO3F,IACtBmC,EAAE6N,QAGF,KAAMrK,EAFNxD,GAAE6N,QAAQrK,MAQlB3F,EAAUkK,GAAaC,GAAYX,EACnCxL,KAAKmC,KAAK+J,EAAWC,EAAUX,GAC/BxL,IAEmB,iBAAZkE,IAAwBA,GAAWA,EAAQyL,SAClDqD,EAAmB9O,EAAQyL,OAAOjB,KAAKsE,IAG3ChR,EAAQG,KAAK,OAAQ6Q,IAYzB7O,EAAE8O,QAAU,SAAU5G,EAAQ6G,EAAI1I,GAC9B,MAAOrG,GAAEkI,GAAQ4G,QAAQC,EAAI1I,IAGjC1K,EAAQI,UAAU+S,QAAU,SAAUC,EAAI1I,GACtC,GAAI3I,GAAWC,IACXqR,EAAYrN,WAAW,WACvBjE,EAASW,OAAO,GAAIlD,OAAMkL,GAAW,mBAAqB0I,EAAK,SAChEA,EAUH,OARAlT,MAAKmC,KAAK,SAAUiF,GAChBgM,aAAaD,GACbtR,EAASY,QAAQ2E,IAClB,SAAUG,GACT6L,aAAaD,GACbtR,EAASW,OAAO+E,IACjB1F,EAAS0J,QAEL1J,EAASG,SAYpBmC,EAAEkP,MAAQ,SAAUhH,EAAQ4G,GAKxB,MAJgB,UAAZA,IACAA,EAAU5G,EACVA,EAAS,QAENlI,EAAEkI,GAAQgH,MAAMJ,IAG3BnT,EAAQI,UAAUmT,MAAQ,SAAUJ,GAChC,MAAOjT,MAAKmC,KAAK,SAAUiF,GACvB,GAAIvF,GAAWC,GAIf,OAHAgE,YAAW,WACPjE,EAASY,QAAQ2E,IAClB6L,GACIpR,EAASG,WAaxBmC,EAAEmP,QAAU,SAAUjT,EAAUyK,GAC5B,MAAO3G,GAAE9D,GAAUiT,QAAQxI,IAG/BhL,EAAQI,UAAUoT,QAAU,SAAUxI,GAClC,GAAIjJ,GAAWC,IACXyR,EAAWxI,EAAYD,EAG3B,OAFAyI,GAAStR,KAAKJ,EAASuP,oBACvBpR,KAAK0S,OAAOa,GAAU/O,KAAK3C,EAASW,QAC7BX,EAASG,SAYpBmC,EAAEqP,OAAS,SAAUnT,GACjB,GAAIyK,GAAOC,EAAY1G,UAAW,EAClC,OAAOF,GAAE9D,GAAUiT,QAAQxI,IAG/BhL,EAAQI,UAAUsT,OAAS,WACvB,GAAID,GAAWxI,EAAY1G,WACvBxC,EAAWC,GAGf,OAFAyR,GAAStR,KAAKJ,EAASuP,oBACvBpR,KAAK0S,OAAOa,GAAU/O,KAAK3C,EAASW,QAC7BX,EAASG,SAWpBmC,EAAEsP,OACFtP,EAAEuP,UAAY,SAAUrT,GACpB,GAAIsT,GAAW5I,EAAY1G,UAAW,EACtC,OAAO,YACH,GAAIkP,GAAWI,EAASd,OAAO9H,EAAY1G,YACvCxC,EAAWC,GAGf,OAFAyR,GAAStR,KAAKJ,EAASuP,oBACvBjN,EAAE9D,GAAUqS,OAAOa,GAAU/O,KAAK3C,EAASW,QACpCX,EAASG,UAIxBlC,EAAQI,UAAUuT,OAClB3T,EAAQI,UAAUwT,UAAY,WAC1B,GAAI5I,GAAOC,EAAY1G,UAEvB,OADAyG,GAAK7C,QAAQjI,MACNmE,EAAEuP,UAAUtP,MAAM,OAAQ0G,IAGrC3G,EAAEyP,MAAQ,SAAUvT,EAAUuN,GAC1B,GAAI+F,GAAW5I,EAAY1G,UAAW,EACtC,OAAO,YAIH,QAASwP,KACL,MAAOxT,GAAS+D,MAAMwJ,EAAOvJ,WAJjC,GAAIkP,GAAWI,EAASd,OAAO9H,EAAY1G,YACvCxC,EAAWC,GAMf,OALAyR,GAAStR,KAAKJ,EAASuP,oBAIvBjN,EAAE0P,GAAOnB,OAAOa,GAAU/O,KAAK3C,EAASW,QACjCX,EAASG,UAIxBlC,EAAQI,UAAU0T,MAAQ,WACtB,GAAI9I,GAAOC,EAAY1G,UAAW,EAElC,OADAyG,GAAK7C,QAAQjI,MACNmE,EAAEyP,MAAMxP,MAAM,OAAQ0G,IAYjC3G,EAAE2P,QACF3P,EAAE4P,MAAQ,SAAU1H,EAAQhJ,EAAMyH,GAC9B,MAAO3G,GAAEkI,GAAQ0H,MAAM1Q,EAAMyH,IAGjChL,EAAQI,UAAU4T,QAClBhU,EAAQI,UAAU6T,MAAQ,SAAU1Q,EAAMyH,GACtC,GAAIyI,GAAWxI,EAAYD,OACvBjJ,EAAWC,GAGf,OAFAyR,GAAStR,KAAKJ,EAASuP,oBACvBpR,KAAKgO,SAAS,QAAS3K,EAAMkQ,IAAW/O,KAAK3C,EAASW,QAC/CX,EAASG,SAapBmC,EAAE6P,MACF7P,EAAE8P,OACF9P,EAAE+P,QAAU,SAAU7H,EAAQhJ,GAC1B,GAAIkQ,GAAWxI,EAAY1G,UAAW,GAClCxC,EAAWC,GAGf,OAFAyR,GAAStR,KAAKJ,EAASuP,oBACvBjN,EAAEkI,GAAQ2B,SAAS,QAAS3K,EAAMkQ,IAAW/O,KAAK3C,EAASW,QACpDX,EAASG,SAGpBlC,EAAQI,UAAU8T,MAClBlU,EAAQI,UAAU+T,OAClBnU,EAAQI,UAAUgU,QAAU,SAAU7Q,GAClC,GAAIkQ,GAAWxI,EAAY1G,UAAW,GAClCxC,EAAWC,GAGf,OAFAyR,GAAStR,KAAKJ,EAASuP,oBACvBpR,KAAKgO,SAAS,QAAS3K,EAAMkQ,IAAW/O,KAAK3C,EAASW,QAC/CX,EAASG,SAapBmC,EAAEkL,QAAUA,EAKZvP,EAAQI,UAAUmP,QAAU,SAAUC,GAClC,MAAIA,OACAtP,MAAKmC,KAAK,SAAUiF,GAChB9C,EAAS,WACLgL,EAAS,KAAMlI,MAEpB,SAAUO,GACTrD,EAAS,WACLgL,EAAS3H,OAIV3H,KAKf,IAAIuJ,IAAcC,GAElB,OAAOrF,OAIJ1E,KAAKO,KAAKZ,EAAQ,eAClB2F,SAAW,SAAS,IAAI","sourcesContent":["!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var o;\"undefined\"!=typeof window?o=window:\"undefined\"!=typeof global?o=global:\"undefined\"!=typeof self&&(o=self);var f=o;f=f.jsforce||(f.jsforce={}),f=f.modules||(f.modules={}),f=f.api||(f.api={}),f.Chatter=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\n * @file Manages Salesforce Chatter REST API calls\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\nvar util    = jsforce.require('util'),\n    _       = jsforce.require('underscore'),\n    Promise = require('../promise');\n\n/**\n * API class for Chatter REST API call\n *\n * @class\n * @param {Connection} conn Connection\n */\nvar Chatter = module.exports = function(conn) {\n  this._conn = conn;\n};\n\n/**\n * Sending request to API endpoint\n * @private\n */\nChatter.prototype._request = function(params, callback) {\n  if (/^(put|post|patch)$/i.test(params.method)) {\n    if (_.isObject(params.body)) {\n      params.headers = {\n        \"Content-Type\": \"application/json\"\n      };\n      params.body = JSON.stringify(params.body);\n    }\n  }\n  params.url = this._normalizeUrl(params.url);\n  return this._conn._request(params, callback);\n};\n\n/**\n * Convert path to site root relative url\n * @private\n */\nChatter.prototype._normalizeUrl = function(url) {\n  if (url.indexOf('/chatter/') === 0 || url.indexOf('/connect/') === 0) {\n    return '/services/data/v' + this._conn.version + url;\n  } else if (/^\\/v[\\d]+\\.[\\d]+\\//.test(url)) {\n    return '/services/data' + url;\n  } else if (url.indexOf('/services/') !== 0 && url[0] === '/') {\n    return '/services/data/v' + this._conn.version + '/chatter' + url;\n  } else {\n    return url;\n  }\n};\n\n/**\n * @typedef {Object} Chatter~RequestParams\n * @prop {String} method - HTTP method\n * @prop {String} url - Resource URL\n * @prop {String} [body] - HTTP body (in POST/PUT/PATCH methods)\n */\n\n/**\n * @typedef {Object} Chatter~RequestResult\n */\n\n/**\n * Make a request for chatter API resource\n *\n * @param {Chatter~RequestParams} params - Paramters representing HTTP request\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback func\n * @returns {Chatter~Request}\n */\nChatter.prototype.request = function(params, callback) {\n  return new Request(this, params).thenCall(callback);\n};\n\n/**\n * Make a resource request to chatter API\n *\n * @param {String} url - Resource URL\n * @param {Object} [queryParams] - Query parameters (in hash object)\n * @returns {Chatter~Resource}\n */\nChatter.prototype.resource = function(url, queryParams) {\n  return new Resource(this, url, queryParams);\n};\n\n/**\n * @typedef {Object} Chatter~BatchRequestResult\n * @prop {Boolean} hasError - Flag if the batch has one or more errors\n * @prop {Array.<Object>} results - Batch request results in array\n * @prop {Number} results.statusCode - HTTP response status code\n * @prop {Chatter~RequestResult} results.result - Parsed HTTP response body\n */\n\n/**\n * Make a batch request to chatter API\n *\n * @params {Array.<Chatter~Request>} requests - Chatter API requests\n * @param {Callback.<Chatter~BatchRequestResult>} [callback] - Callback func\n * @returns {Promise.<Chatter~BatchRequestResult>}\n */\nChatter.prototype.batch = function(requests, callback) {\n  var self = this;\n  var batchRequests = [], batchDeferreds = [];\n  _.forEach(requests, function(request) {\n    var deferred = Promise.defer();\n    request._promise = deferred.promise;\n    batchRequests.push(request.batchParams());\n    batchDeferreds.push(deferred);\n  });\n  var params = {\n    method: 'POST',\n    url: this._normalizeUrl('/connect/batch'),\n    body: {\n      batchRequests: batchRequests\n    }\n  };\n  return this._request(params).then(function(res) {\n    _.forEach(res.results, function(result, i) {\n      var deferred = batchDeferreds[i];\n      if (result.statusCode >= 400) {\n        deferred.reject(result.result);\n      } else {\n        deferred.resolve(result.result);\n      }\n    });\n    return res;\n  }).thenCall(callback);\n};\n\n/*--------------------------------------------*/\n/**\n * A class representing chatter API request\n *\n * @protected\n * @class Chatter~Request\n * @implements {Promise.<Chatter~RequestResult>}\n * @param {Chatter} chatter - Chatter API object\n * @param {Chatter~RequestParams} params - Paramters representing HTTP request\n */\nvar Request = function(chatter, params) {\n  this._chatter = chatter;\n  this._params = params;\n  this._promise = null;\n};\n\n/**\n * @typedef {Object} Chatter~BatchRequestParams\n * @prop {String} method - HTTP method\n * @prop {String} url - Resource URL\n * @prop {String} [richInput] - HTTP body (in POST/PUT/PATCH methods)\n */\n\n/**\n * Retrieve parameters in batch request form\n *\n * @method Chatter~Request#batchParams\n * @returns {Chatter~BatchRequestParams}\n */\nRequest.prototype.batchParams = function() {\n  var params = this._params;\n  var batchParams = {\n    method: params.method,\n    url: this._chatter._normalizeUrl(params.url)\n  };\n  if (this._params.body) {\n    batchParams.richInput = this._params.body;\n  }\n  return batchParams;\n};\n\n/**\n * Retrieve parameters in batch request form\n *\n * @method Chatter~Request#promise\n * @returns {Promise.<Chatter~RequestResult>}\n */\nRequest.prototype.promise = function() {\n  return this._promise || this._chatter._request(this._params);\n};\n\n/**\n * Returns Node.js Stream object for request\n *\n * @method Chatter~Request#stream\n * @returns {stream.Stream}\n */\nRequest.prototype.stream = function() {\n  return this._chatter._request(this._params).stream();\n};\n\n/**\n * Promise/A+ interface\n * http://promises-aplus.github.io/promises-spec/\n *\n * Delegate to deferred promise, return promise instance for batch result\n *\n * @method Chatter~Request#then\n */\nRequest.prototype.then = function(onResolve, onReject) {\n  return this.promise().then(onResolve, onReject);\n};\n\n/**\n * Promise/A+ extension\n * Call \"then\" using given node-style callback function\n *\n * @method Chatter~Request#thenCall\n */\nRequest.prototype.thenCall = function(callback) {\n  return _.isFunction(callback) ? this.promise().thenCall(callback) : this;\n};\n\n\n/*--------------------------------------------*/\n/**\n * A class representing chatter API resource\n *\n * @protected\n * @class Chatter~Resource\n * @extends Chatter~Request\n * @param {Chatter} chatter - Chatter API object\n * @param {String} url - Resource URL\n * @param {Object} [queryParams] - Query parameters (in hash object)\n */\nvar Resource = function(chatter, url, queryParams) {\n  if (queryParams) {\n    var qstring = _.map(_.keys(queryParams), function(name) {\n      return name + \"=\" + encodeURIComponent(queryParams[name]);\n    }).join('&');\n    url += (url.indexOf('?') > 0 ? '&' : '?') + qstring;\n  }\n  Resource.super_.call(this, chatter, { method: 'GET', url: url });\n  this._url = url;\n};\n\nutil.inherits(Resource, Request);\n\n/**\n * Create a new resource\n *\n * @method Chatter~Resource#create\n * @param {Object} data - Data to newly post\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\n * @returns {Chatter~Request}\n */\nResource.prototype.create = function(data, callback) {\n  return this._chatter.request({\n    method: 'POST',\n    url: this._url,\n    body: data\n  }).thenCall(callback);\n};\n\n/**\n * Retrieve resource content\n *\n * @method Chatter~Resource#retrieve\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\n * @returns {Chatter~Request}\n */\nResource.prototype.retrieve = function(callback) {\n  return this.thenCall(callback);\n};\n\n/**\n * Update specified resource\n *\n * @method Chatter~Resource#update\n * @param {Obejct} data - Data to update\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\n * @returns {Chatter~Request}\n */\nResource.prototype.update = function(data, callback) {\n  return this._chatter.request({\n    method: 'POST',\n    url: this._url,\n    body: data\n  }).thenCall(callback);\n};\n\n/**\n * Synonym of Resource#delete()\n *\n * @method Chatter~Resource#del\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\n * @returns {Chatter~Request}\n */\n/**\n * Delete specified resource\n *\n * @method Chatter~Resource#delete\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\n * @returns {Chatter~Request}\n */\nResource.prototype.del =\nResource.prototype[\"delete\"] = function(callback) {\n  return this._chatter.request({\n    method: 'DELETE',\n    url: this._url\n  }).thenCall(callback);\n};\n\n},{\"../promise\":2}],2:[function(require,module,exports){\n(function (process){\n/*global process*/\nvar Q = require('q'),\n    _ = jsforce.require('underscore')._;\n\n/**\n * Promises/A+ spec compliant class, with a little extension\n * http://promises-aplus.github.io/promises-spec/\n *\n * @class Promise\n * @constructor\n * @param {Promise.<T>|T} o - Object to wrap with promise\n * @template T\n */\nvar Promise = function(o) {\n  this._promise = Q(o);\n};\n\n/**\n * @callback FulfilledCallback\n * @param {T} result - Fulfilled value\n * @returns {S}\n * @template T,S\n */\n\n/**\n * @callback RejectedCallback\n * @param {Error} reason - Rejected reason\n * @returns {S}\n * @template S\n */\n\n/**\n * The \"then\" method from the Promises/A+ specification\n *\n * @param {FulfilledCallback.<T, S1>} [onFulfilled]\n * @param {RejectedCallback.<S2>} [onRejected]\n * @returns {Promise.<S1|S2>}\n */\nPromise.prototype.then = function() {\n  // Delegate Q promise implementation and wrap by our Promise instance\n  return new Promise(this._promise.then.apply(this._promise, arguments));\n};\n\n/**\n * Call \"then\" using given node-style callback function\n *\n * @param {Callback.<T>} [callback] - Callback function\n * @returns {Promise}\n */\nPromise.prototype.thenCall = function(callback) {\n  if (_.isFunction(callback)) {\n    this.then(function(res) {\n      process.nextTick(function() {\n        callback(null, res);\n      });\n    }, function(err) {\n      process.nextTick(function() {\n        callback(err);\n      });\n    });\n  }\n  return this;\n};\n\n/**\n * A sugar method, equivalent to promise.then(undefined, onRejected).\n *\n * @param {RejectedCallback.<S>} onRejected\n * @returns {Promise.<S>}\n */\nPromise.prototype.fail = function() {\n  return new Promise(this._promise.fail.apply(this._promise, arguments));\n};\n\n/**\n * Alias for completion\n *\n * @param {FulfilledCallback.<T, S>} [onFulfilled]\n * @returns {Promise.<S>}\n */\nPromise.prototype.done = function() {\n  return new Promise(this._promise.done.apply(this._promise, arguments));\n};\n\n/**\n * @param {...Promise.<*>} p\n */\nPromise.when = function() {\n  return new Promise(Q.when.apply(Q, arguments));\n};\n\n/**\n * Returns rejecting promise with given reason\n *\n * @param {Error} reason - Rejecting reason\n * @returns {Promise}\n */\nPromise.reject = function(reason) {\n  return new Promise(Q.reject(reason));\n};\n\n/**\n * Returns a promise that is fulfilled with an array containing the fulfillment value of each promise, \n * or is rejected with the same rejection reason as the first promise to be rejected.\n *\n * @param {Array.<Promise.<*>|*>} promises\n * @returns {Promise.<Array.<*>>}\n */\nPromise.all = function() {\n  return new Promise(Q.all.apply(Q, arguments));\n};\n\n/**\n * Returns a deferred object\n *\n * @returns {Deferred}\n */\nPromise.defer = function() {\n  return new Deferred();\n};\n\n/**\n * Deferred object\n *\n * @protected\n * @constructor\n */\nvar Deferred = function() {\n  this._deferred = Q.defer();\n  this.promise = new Promise(this._deferred.promise);\n};\n\n/**\n * Resolve promise\n * @param {*} result - Resolving result\n */\nDeferred.prototype.resolve = function() {\n  return this._deferred.resolve.apply(this._promise, arguments);\n};\n\n/**\n * Reject promise\n * @param {Error} error - Rejecting reason\n */\nDeferred.prototype.reject = function() {\n  return this._deferred.reject.apply(this._promise, arguments);\n};\n\n/**\n *\n */\nmodule.exports = Promise;\n\n}).call(this,require('_process'))\n},{\"_process\":3,\"q\":4}],3:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\n\nprocess.nextTick = (function () {\n    var canSetImmediate = typeof window !== 'undefined'\n    && window.setImmediate;\n    var canPost = typeof window !== 'undefined'\n    && window.postMessage && window.addEventListener\n    ;\n\n    if (canSetImmediate) {\n        return function (f) { return window.setImmediate(f) };\n    }\n\n    if (canPost) {\n        var queue = [];\n        window.addEventListener('message', function (ev) {\n            var source = ev.source;\n            if ((source === window || source === null) && ev.data === 'process-tick') {\n                ev.stopPropagation();\n                if (queue.length > 0) {\n                    var fn = queue.shift();\n                    fn();\n                }\n            }\n        }, true);\n\n        return function nextTick(fn) {\n            queue.push(fn);\n            window.postMessage('process-tick', '*');\n        };\n    }\n\n    return function nextTick(fn) {\n        setTimeout(fn, 0);\n    };\n})();\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n}\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\n\n},{}],4:[function(require,module,exports){\n(function (process){\n// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n    // Turn off strict mode for this function so we can assign to global.Q\n    /* jshint strict: false */\n\n    // This file will function properly as a <script> tag, or a module\n    // using CommonJS and NodeJS or RequireJS module formats.  In\n    // Common/Node/RequireJS, the module exports the Q API and when\n    // executed as a simple <script>, it creates a Q global instead.\n\n    // Montage Require\n    if (typeof bootstrap === \"function\") {\n        bootstrap(\"promise\", definition);\n\n    // CommonJS\n    } else if (typeof exports === \"object\") {\n        module.exports = definition();\n\n    // RequireJS\n    } else if (typeof define === \"function\" && define.amd) {\n        define(definition);\n\n    // SES (Secure EcmaScript)\n    } else if (typeof ses !== \"undefined\") {\n        if (!ses.ok()) {\n            return;\n        } else {\n            ses.makeQ = definition;\n        }\n\n    // <script>\n    } else {\n        Q = definition();\n    }\n\n})(function () {\n\"use strict\";\n\nvar hasStacks = false;\ntry {\n    throw new Error();\n} catch (e) {\n    hasStacks = !!e.stack;\n}\n\n// All code after this point will be filtered from stack traces reported\n// by Q.\nvar qStartingLine = captureLine();\nvar qFileName;\n\n// shims\n\n// used for fallback in \"allResolved\"\nvar noop = function () {};\n\n// Use the fastest possible means to execute a task in a future turn\n// of the event loop.\nvar nextTick =(function () {\n    // linked list of tasks (single, with head node)\n    var head = {task: void 0, next: null};\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false;\n\n    function flush() {\n        /* jshint loopfunc: true */\n\n        while (head.next) {\n            head = head.next;\n            var task = head.task;\n            head.task = void 0;\n            var domain = head.domain;\n\n            if (domain) {\n                head.domain = void 0;\n                domain.enter();\n            }\n\n            try {\n                task();\n\n            } catch (e) {\n                if (isNodeJS) {\n                    // In node, uncaught exceptions are considered fatal errors.\n                    // Re-throw them synchronously to interrupt flushing!\n\n                    // Ensure continuation if the uncaught exception is suppressed\n                    // listening \"uncaughtException\" events (as domains does).\n                    // Continue in next event to avoid tick recursion.\n                    if (domain) {\n                        domain.exit();\n                    }\n                    setTimeout(flush, 0);\n                    if (domain) {\n                        domain.enter();\n                    }\n\n                    throw e;\n\n                } else {\n                    // In browsers, uncaught exceptions are not fatal.\n                    // Re-throw them asynchronously to avoid slow-downs.\n                    setTimeout(function() {\n                       throw e;\n                    }, 0);\n                }\n            }\n\n            if (domain) {\n                domain.exit();\n            }\n        }\n\n        flushing = false;\n    }\n\n    nextTick = function (task) {\n        tail = tail.next = {\n            task: task,\n            domain: isNodeJS && process.domain,\n            next: null\n        };\n\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n\n    if (typeof process !== \"undefined\" && process.nextTick) {\n        // Node.js before 0.9. Note that some fake-Node environments, like the\n        // Mocha test runner, introduce a `process` global without a `nextTick`.\n        isNodeJS = true;\n\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n\n    } else if (typeof setImmediate === \"function\") {\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n        if (typeof window !== \"undefined\") {\n            requestTick = setImmediate.bind(window, flush);\n        } else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n\n    } else if (typeof MessageChannel !== \"undefined\") {\n        // modern browsers\n        // http://www.nonblocking.io/2011/06/windownexttick.html\n        var channel = new MessageChannel();\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n        // working message ports the first time a page loads.\n        channel.port1.onmessage = function () {\n            requestTick = requestPortTick;\n            channel.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick = function () {\n            // Opera requires us to provide a message payload, regardless of\n            // whether we use it.\n            channel.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick();\n        };\n\n    } else {\n        // old browsers\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n\n    return nextTick;\n})();\n\n// Attempt to make generics safe in the face of downstream\n// modifications.\n// There is no situation where this is necessary.\n// If you need a security guarantee, these primordials need to be\n// deeply frozen anyway, and if you don’t need a security guarantee,\n// this is just plain paranoid.\n// However, this does have the nice side-effect of reducing the size\n// of the code by reducing x.call() to merely x(), eliminating many\n// hard-to-minify characters.\n// See Mark Miller’s explanation of what this does.\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\nvar call = Function.call;\nfunction uncurryThis(f) {\n    return function () {\n        return call.apply(f, arguments);\n    };\n}\n// This is equivalent, but slower:\n// uncurryThis = Function_bind.bind(Function_bind.call);\n// http://jsperf.com/uncurrythis\n\nvar array_slice = uncurryThis(Array.prototype.slice);\n\nvar array_reduce = uncurryThis(\n    Array.prototype.reduce || function (callback, basis) {\n        var index = 0,\n            length = this.length;\n        // concerning the initial value, if one is not provided\n        if (arguments.length === 1) {\n            // seek to the first value in the array, accounting\n            // for the possibility that is is a sparse array\n            do {\n                if (index in this) {\n                    basis = this[index++];\n                    break;\n                }\n                if (++index >= length) {\n                    throw new TypeError();\n                }\n            } while (1);\n        }\n        // reduce\n        for (; index < length; index++) {\n            // account for the possibility that the array is sparse\n            if (index in this) {\n                basis = callback(basis, this[index], index);\n            }\n        }\n        return basis;\n    }\n);\n\nvar array_indexOf = uncurryThis(\n    Array.prototype.indexOf || function (value) {\n        // not a very good shim, but good enough for our one use of it\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n);\n\nvar array_map = uncurryThis(\n    Array.prototype.map || function (callback, thisp) {\n        var self = this;\n        var collect = [];\n        array_reduce(self, function (undefined, value, index) {\n            collect.push(callback.call(thisp, value, index, self));\n        }, void 0);\n        return collect;\n    }\n);\n\nvar object_create = Object.create || function (prototype) {\n    function Type() { }\n    Type.prototype = prototype;\n    return new Type();\n};\n\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\nvar object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n        if (object_hasOwnProperty(object, key)) {\n            keys.push(key);\n        }\n    }\n    return keys;\n};\n\nvar object_toString = uncurryThis(Object.prototype.toString);\n\nfunction isObject(value) {\n    return value === Object(value);\n}\n\n// generator related shims\n\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\nfunction isStopIteration(exception) {\n    return (\n        object_toString(exception) === \"[object StopIteration]\" ||\n        exception instanceof QReturnValue\n    );\n}\n\n// FIXME: Remove this helper and Q.return once ES6 generators are in\n// SpiderMonkey.\nvar QReturnValue;\nif (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n} else {\n    QReturnValue = function (value) {\n        this.value = value;\n    };\n}\n\n// Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n// engine that has a deployed base of browsers that support generators.\n// However, SM's generators use the Python-inspired semantics of\n// outdated ES6 drafts.  We would like to support ES6, but we'd also\n// like to make it possible to use generators in deployed browsers, so\n// we also support Python-style generators.  At some point we can remove\n// this block.\nvar hasES6Generators;\ntry {\n    /* jshint evil: true, nonew: false */\n    new Function(\"(function* (){ yield 1; })\");\n    hasES6Generators = true;\n} catch (e) {\n    hasES6Generators = false;\n}\n\n// long stack traces\n\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\nfunction makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks &&\n        promise.stack &&\n        typeof error === \"object\" &&\n        error !== null &&\n        error.stack &&\n        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1\n    ) {\n        var stacks = [];\n        for (var p = promise; !!p; p = p.source) {\n            if (p.stack) {\n                stacks.unshift(p.stack);\n            }\n        }\n        stacks.unshift(error.stack);\n\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n        error.stack = filterStackString(concatedStacks);\n    }\n}\n\nfunction filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n        var line = lines[i];\n\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n            desiredLines.push(line);\n        }\n    }\n    return desiredLines.join(\"\\n\");\n}\n\nfunction isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n           stackLine.indexOf(\"(node.js:\") !== -1;\n}\n\nfunction getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n    if (attempt1) {\n        return [attempt1[1], Number(attempt1[2])];\n    }\n\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n    if (attempt2) {\n        return [attempt2[1], Number(attempt2[2])];\n    }\n\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n    if (attempt3) {\n        return [attempt3[1], Number(attempt3[2])];\n    }\n}\n\nfunction isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n        return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n\n    return fileName === qFileName &&\n        lineNumber >= qStartingLine &&\n        lineNumber <= qEndingLine;\n}\n\n// discover own file name and line number range for filtering stack\n// traces\nfunction captureLine() {\n    if (!hasStacks) {\n        return;\n    }\n\n    try {\n        throw new Error();\n    } catch (e) {\n        var lines = e.stack.split(\"\\n\");\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n        if (!fileNameAndLineNumber) {\n            return;\n        }\n\n        qFileName = fileNameAndLineNumber[0];\n        return fileNameAndLineNumber[1];\n    }\n}\n\nfunction deprecate(callback, name, alternative) {\n    return function () {\n        if (typeof console !== \"undefined\" &&\n            typeof console.warn === \"function\") {\n            console.warn(name + \" is deprecated, use \" + alternative +\n                         \" instead.\", new Error(\"\").stack);\n        }\n        return callback.apply(callback, arguments);\n    };\n}\n\n// end of shims\n// beginning of real work\n\n/**\n * Constructs a promise for an immediate reference, passes promises through, or\n * coerces promises from different systems.\n * @param value immediate reference or promise\n */\nfunction Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (isPromise(value)) {\n        return value;\n    }\n\n    // assimilate thenables\n    if (isPromiseAlike(value)) {\n        return coerce(value);\n    } else {\n        return fulfill(value);\n    }\n}\nQ.resolve = Q;\n\n/**\n * Performs a task in a future turn of the event loop.\n * @param {Function} task\n */\nQ.nextTick = nextTick;\n\n/**\n * Controls whether or not long stack traces will be on\n */\nQ.longStackSupport = false;\n\n/**\n * Constructs a {promise, resolve, reject} object.\n *\n * `resolve` is a callback to invoke with a more resolved value for the\n * promise. To fulfill the promise, invoke `resolve` with any value that is\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\n * thenable, or invoke `reject` with the reason directly. To resolve the\n * promise to another thenable, thus putting it in the same state, invoke\n * `resolve` with that other thenable.\n */\nQ.defer = defer;\nfunction defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [], progressListeners = [], resolvedPromise;\n\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n        var args = array_slice(arguments);\n        if (messages) {\n            messages.push(args);\n            if (op === \"when\" && operands[1]) { // progress operand\n                progressListeners.push(operands[1]);\n            }\n        } else {\n            nextTick(function () {\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n            });\n        }\n    };\n\n    // XXX deprecated\n    promise.valueOf = deprecate(function () {\n        if (messages) {\n            return promise;\n        }\n        var nearerValue = nearer(resolvedPromise);\n        if (isPromise(nearerValue)) {\n            resolvedPromise = nearerValue; // shorten chain\n        }\n        return nearerValue;\n    }, \"valueOf\", \"inspect\");\n\n    promise.inspect = function () {\n        if (!resolvedPromise) {\n            return { state: \"pending\" };\n        }\n        return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n        try {\n            throw new Error();\n        } catch (e) {\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n            // accessor around; that causes memory leaks as per GH-111. Just\n            // reify the stack trace as a string ASAP.\n            //\n            // At the same time, cut off the first line; it's always just\n            // \"[object Promise]\\n\", as per the `toString`.\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n        }\n    }\n\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n    function become(newPromise) {\n        resolvedPromise = newPromise;\n        promise.source = newPromise;\n\n        array_reduce(messages, function (undefined, message) {\n            nextTick(function () {\n                newPromise.promiseDispatch.apply(newPromise, message);\n            });\n        }, void 0);\n\n        messages = void 0;\n        progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n    deferred.resolve = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(fulfill(value));\n    };\n    deferred.reject = function (reason) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(reject(reason));\n    };\n    deferred.notify = function (progress) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        array_reduce(progressListeners, function (undefined, progressListener) {\n            nextTick(function () {\n                progressListener(progress);\n            });\n        }, void 0);\n    };\n\n    return deferred;\n}\n\n/**\n * Creates a Node-style callback that will resolve or reject the deferred\n * promise.\n * @returns a nodeback\n */\ndefer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n        if (error) {\n            self.reject(error);\n        } else if (arguments.length > 2) {\n            self.resolve(array_slice(arguments, 1));\n        } else {\n            self.resolve(value);\n        }\n    };\n};\n\n/**\n * @param resolver {Function} a function that returns nothing and accepts\n * the resolve, reject, and notify functions for a deferred.\n * @returns a promise that may be resolved with the given resolve and reject\n * functions, or rejected by a thrown exception in resolver\n */\nQ.promise = promise;\nfunction promise(resolver) {\n    if (typeof resolver !== \"function\") {\n        throw new TypeError(\"resolver must be a function.\");\n    }\n    var deferred = defer();\n    try {\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n        deferred.reject(reason);\n    }\n    return deferred.promise;\n}\n\n// XXX experimental.  This method is a way to denote that a local value is\n// serializable and should be immediately dispatched to a remote upon request,\n// instead of passing a reference.\nQ.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n};\n\nPromise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n};\n\n/**\n * If two promises eventually fulfill to the same value, promises that value,\n * but otherwise rejects.\n * @param x {Any*}\n * @param y {Any*}\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\n * otherwise.\n *\n */\nQ.join = function (x, y) {\n    return Q(x).join(y);\n};\n\nPromise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n        if (x === y) {\n            // TODO: \"===\" should be Object.is or equiv\n            return x;\n        } else {\n            throw new Error(\"Can't join: not the same: \" + x + \" \" + y);\n        }\n    });\n};\n\n/**\n * Returns a promise for the first of an array of promises to become fulfilled.\n * @param answers {Array[Any*]} promises to race\n * @returns {Any*} the first promise to be fulfilled\n */\nQ.race = race;\nfunction race(answerPs) {\n    return promise(function(resolve, reject) {\n        // Switch to this once we can assume at least ES5\n        // answerPs.forEach(function(answerP) {\n        //     Q(answerP).then(resolve, reject);\n        // });\n        // Use this in the meantime\n        for (var i = 0, len = answerPs.length; i < len; i++) {\n            Q(answerPs[i]).then(resolve, reject);\n        }\n    });\n}\n\nPromise.prototype.race = function () {\n    return this.then(Q.race);\n};\n\n/**\n * Constructs a Promise with a promise descriptor object and optional fallback\n * function.  The descriptor contains methods like when(rejected), get(name),\n * set(name, value), post(name, args), and delete(name), which all\n * return either a value, a promise for a value, or a rejection.  The fallback\n * accepts the operation name, a resolver, and any further arguments that would\n * have been forwarded to the appropriate method above had a method been\n * provided with the proper name.  The API makes no guarantees about the nature\n * of the returned object, apart from that it is usable whereever promises are\n * bought and sold.\n */\nQ.makePromise = Promise;\nfunction Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n        fallback = function (op) {\n            return reject(new Error(\n                \"Promise does not support operation: \" + op\n            ));\n        };\n    }\n    if (inspect === void 0) {\n        inspect = function () {\n            return {state: \"unknown\"};\n        };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n        var result;\n        try {\n            if (descriptor[op]) {\n                result = descriptor[op].apply(promise, args);\n            } else {\n                result = fallback.call(promise, op, args);\n            }\n        } catch (exception) {\n            result = reject(exception);\n        }\n        if (resolve) {\n            resolve(result);\n        }\n    };\n\n    promise.inspect = inspect;\n\n    // XXX deprecated `valueOf` and `exception` support\n    if (inspect) {\n        var inspected = inspect();\n        if (inspected.state === \"rejected\") {\n            promise.exception = inspected.reason;\n        }\n\n        promise.valueOf = deprecate(function () {\n            var inspected = inspect();\n            if (inspected.state === \"pending\" ||\n                inspected.state === \"rejected\") {\n                return promise;\n            }\n            return inspected.value;\n        });\n    }\n\n    return promise;\n}\n\nPromise.prototype.toString = function () {\n    return \"[object Promise]\";\n};\n\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false;   // ensure the untrusted promise makes at most a\n                        // single call to one of the callbacks\n\n    function _fulfilled(value) {\n        try {\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n        } catch (exception) {\n            return reject(exception);\n        }\n    }\n\n    function _rejected(exception) {\n        if (typeof rejected === \"function\") {\n            makeStackTraceLong(exception, self);\n            try {\n                return rejected(exception);\n            } catch (newException) {\n                return reject(newException);\n            }\n        }\n        return reject(exception);\n    }\n\n    function _progressed(value) {\n        return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    nextTick(function () {\n        self.promiseDispatch(function (value) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_fulfilled(value));\n        }, \"when\", [function (exception) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_rejected(exception));\n        }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n        var newValue;\n        var threw = false;\n        try {\n            newValue = _progressed(value);\n        } catch (e) {\n            threw = true;\n            if (Q.onerror) {\n                Q.onerror(e);\n            } else {\n                throw e;\n            }\n        }\n\n        if (!threw) {\n            deferred.notify(newValue);\n        }\n    }]);\n\n    return deferred.promise;\n};\n\n/**\n * Registers an observer on a promise.\n *\n * Guarantees:\n *\n * 1. that fulfilled and rejected will be called only once.\n * 2. that either the fulfilled callback or the rejected callback will be\n *    called, but not both.\n * 3. that fulfilled and rejected will not be called in this turn.\n *\n * @param value      promise or immediate reference to observe\n * @param fulfilled  function to be called with the fulfilled value\n * @param rejected   function to be called with the rejection exception\n * @param progressed function to be called on any progress notifications\n * @return promise for the return value from the invoked callback\n */\nQ.when = when;\nfunction when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n}\n\nPromise.prototype.thenResolve = function (value) {\n    return this.then(function () { return value; });\n};\n\nQ.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n};\n\nPromise.prototype.thenReject = function (reason) {\n    return this.then(function () { throw reason; });\n};\n\nQ.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n};\n\n/**\n * If an object is not a promise, it is as \"near\" as possible.\n * If a promise is rejected, it is as \"near\" as possible too.\n * If it’s a fulfilled promise, the fulfillment value is nearer.\n * If it’s a deferred promise and the deferred has been resolved, the\n * resolution is \"nearer\".\n * @param object\n * @returns most resolved (nearest) form of the object\n */\n\n// XXX should we re-do this?\nQ.nearer = nearer;\nfunction nearer(value) {\n    if (isPromise(value)) {\n        var inspected = value.inspect();\n        if (inspected.state === \"fulfilled\") {\n            return inspected.value;\n        }\n    }\n    return value;\n}\n\n/**\n * @returns whether the given object is a promise.\n * Otherwise it is a fulfilled value.\n */\nQ.isPromise = isPromise;\nfunction isPromise(object) {\n    return isObject(object) &&\n        typeof object.promiseDispatch === \"function\" &&\n        typeof object.inspect === \"function\";\n}\n\nQ.isPromiseAlike = isPromiseAlike;\nfunction isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n}\n\n/**\n * @returns whether the given object is a pending promise, meaning not\n * fulfilled or rejected.\n */\nQ.isPending = isPending;\nfunction isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n}\n\nPromise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n};\n\n/**\n * @returns whether the given object is a value or fulfilled\n * promise.\n */\nQ.isFulfilled = isFulfilled;\nfunction isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n}\n\nPromise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n};\n\n/**\n * @returns whether the given object is a rejected promise.\n */\nQ.isRejected = isRejected;\nfunction isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n}\n\nPromise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n};\n\n//// BEGIN UNHANDLED REJECTION TRACKING\n\n// This promise library consumes exceptions thrown in handlers so they can be\n// handled by a subsequent promise.  The exceptions get added to this array when\n// they are created, and removed when they are handled.  Note that in ES6 or\n// shimmed environments, this would naturally be a `Set`.\nvar unhandledReasons = [];\nvar unhandledRejections = [];\nvar unhandledReasonsDisplayed = false;\nvar trackUnhandledRejections = true;\nfunction displayUnhandledReasons() {\n    if (\n        !unhandledReasonsDisplayed &&\n        typeof window !== \"undefined\" &&\n        !window.Touch &&\n        window.console\n    ) {\n        console.warn(\"[Q] Unhandled rejection reasons (should be empty):\",\n                     unhandledReasons);\n    }\n\n    unhandledReasonsDisplayed = true;\n}\n\nfunction logUnhandledReasons() {\n    for (var i = 0; i < unhandledReasons.length; i++) {\n        var reason = unhandledReasons[i];\n        console.warn(\"Unhandled rejection reason:\", reason);\n    }\n}\n\nfunction resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n    unhandledReasonsDisplayed = false;\n\n    if (!trackUnhandledRejections) {\n        trackUnhandledRejections = true;\n\n        // Show unhandled rejection reasons if Node exits without handling an\n        // outstanding rejection.  (Note that Browserify presently produces a\n        // `process` global without the `EventEmitter` `on` method.)\n        if (typeof process !== \"undefined\" && process.on) {\n            process.on(\"exit\", logUnhandledReasons);\n        }\n    }\n}\n\nfunction trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    unhandledRejections.push(promise);\n    if (reason && typeof reason.stack !== \"undefined\") {\n        unhandledReasons.push(reason.stack);\n    } else {\n        unhandledReasons.push(\"(no stack) \" + reason);\n    }\n    displayUnhandledReasons();\n}\n\nfunction untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n    if (at !== -1) {\n        unhandledRejections.splice(at, 1);\n        unhandledReasons.splice(at, 1);\n    }\n}\n\nQ.resetUnhandledRejections = resetUnhandledRejections;\n\nQ.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n};\n\nQ.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    if (typeof process !== \"undefined\" && process.on) {\n        process.removeListener(\"exit\", logUnhandledReasons);\n    }\n    trackUnhandledRejections = false;\n};\n\nresetUnhandledRejections();\n\n//// END UNHANDLED REJECTION TRACKING\n\n/**\n * Constructs a rejected promise.\n * @param reason value describing the failure\n */\nQ.reject = reject;\nfunction reject(reason) {\n    var rejection = Promise({\n        \"when\": function (rejected) {\n            // note that the error has been handled\n            if (rejected) {\n                untrackRejection(this);\n            }\n            return rejected ? rejected(reason) : this;\n        }\n    }, function fallback() {\n        return this;\n    }, function inspect() {\n        return { state: \"rejected\", reason: reason };\n    });\n\n    // Note that the reason has not been handled.\n    trackRejection(rejection, reason);\n\n    return rejection;\n}\n\n/**\n * Constructs a fulfilled promise for an immediate reference.\n * @param value immediate reference\n */\nQ.fulfill = fulfill;\nfunction fulfill(value) {\n    return Promise({\n        \"when\": function () {\n            return value;\n        },\n        \"get\": function (name) {\n            return value[name];\n        },\n        \"set\": function (name, rhs) {\n            value[name] = rhs;\n        },\n        \"delete\": function (name) {\n            delete value[name];\n        },\n        \"post\": function (name, args) {\n            // Mark Miller proposes that post with no name should apply a\n            // promised function.\n            if (name === null || name === void 0) {\n                return value.apply(void 0, args);\n            } else {\n                return value[name].apply(value, args);\n            }\n        },\n        \"apply\": function (thisp, args) {\n            return value.apply(thisp, args);\n        },\n        \"keys\": function () {\n            return object_keys(value);\n        }\n    }, void 0, function inspect() {\n        return { state: \"fulfilled\", value: value };\n    });\n}\n\n/**\n * Converts thenables to Q promises.\n * @param promise thenable promise\n * @returns a Q promise\n */\nfunction coerce(promise) {\n    var deferred = defer();\n    nextTick(function () {\n        try {\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n        } catch (exception) {\n            deferred.reject(exception);\n        }\n    });\n    return deferred.promise;\n}\n\n/**\n * Annotates an object such that it will never be\n * transferred away from this process over any promise\n * communication channel.\n * @param object\n * @returns promise a wrapping of that object that\n * additionally responds to the \"isDef\" message\n * without a rejection.\n */\nQ.master = master;\nfunction master(object) {\n    return Promise({\n        \"isDef\": function () {}\n    }, function fallback(op, args) {\n        return dispatch(object, op, args);\n    }, function () {\n        return Q(object).inspect();\n    });\n}\n\n/**\n * Spreads the values of a promised array of arguments into the\n * fulfillment callback.\n * @param fulfilled callback that receives variadic arguments from the\n * promised array\n * @param rejected callback that receives the exception if the promise\n * is rejected.\n * @returns a promise for the return value or thrown exception of\n * either callback.\n */\nQ.spread = spread;\nfunction spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n}\n\nPromise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n        return fulfilled.apply(void 0, array);\n    }, rejected);\n};\n\n/**\n * The async function is a decorator for generator functions, turning\n * them into asynchronous generators.  Although generators are only part\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\n * errors in older engines.  This code should continue to work and will\n * in fact improve over time as the language improves.\n *\n * ES6 generators are currently part of V8 version 3.19 with the\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n * for longer, but under an older Python-inspired form.  This function\n * works on both kinds of generators.\n *\n * Decorates a generator function such that:\n *  - it may yield promises\n *  - execution will continue when that promise is fulfilled\n *  - the value of the yield expression will be the fulfilled value\n *  - it returns a promise for the return value (when the generator\n *    stops iterating)\n *  - the decorated function returns a promise for the return value\n *    of the generator or the first rejected promise among those\n *    yielded.\n *  - if an error is thrown in the generator, it propagates through\n *    every following yield until it is caught, or until it escapes\n *    the generator function altogether, and is translated into a\n *    rejection for the promise returned by the decorated generator.\n */\nQ.async = async;\nfunction async(makeGenerator) {\n    return function () {\n        // when verb is \"send\", arg is a value\n        // when verb is \"throw\", arg is an exception\n        function continuer(verb, arg) {\n            var result;\n            if (hasES6Generators) {\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    return reject(exception);\n                }\n                if (result.done) {\n                    return result.value;\n                } else {\n                    return when(result.value, callback, errback);\n                }\n            } else {\n                // FIXME: Remove this case when SM does ES6 generators.\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    if (isStopIteration(exception)) {\n                        return exception.value;\n                    } else {\n                        return reject(exception);\n                    }\n                }\n                return when(result, callback, errback);\n            }\n        }\n        var generator = makeGenerator.apply(this, arguments);\n        var callback = continuer.bind(continuer, \"next\");\n        var errback = continuer.bind(continuer, \"throw\");\n        return callback();\n    };\n}\n\n/**\n * The spawn function is a small wrapper around async that immediately\n * calls the generator and also ends the promise chain, so that any\n * unhandled errors are thrown instead of forwarded to the error\n * handler. This is useful because it's extremely common to run\n * generators at the top-level to work with libraries.\n */\nQ.spawn = spawn;\nfunction spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n}\n\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n/**\n * Throws a ReturnValue exception to stop an asynchronous generator.\n *\n * This interface is a stop-gap measure to support generator return\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n * generators like Chromium 29, just use \"return\" in your generator\n * functions.\n *\n * @param value the return value for the surrounding generator\n * @throws ReturnValue exception with the value.\n * @example\n * // ES6 style\n * Q.async(function* () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      return foo + bar;\n * })\n * // Older SpiderMonkey style\n * Q.async(function () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      Q.return(foo + bar);\n * })\n */\nQ[\"return\"] = _return;\nfunction _return(value) {\n    throw new QReturnValue(value);\n}\n\n/**\n * The promised function decorator ensures that any promise arguments\n * are settled and passed as values (`this` is also settled and passed\n * as a value).  It will also ensure that the result of a function is\n * always a promise.\n *\n * @example\n * var add = Q.promised(function (a, b) {\n *     return a + b;\n * });\n * add(Q(a), Q(B));\n *\n * @param {function} callback The function to decorate\n * @returns {function} a function that has been decorated.\n */\nQ.promised = promised;\nfunction promised(callback) {\n    return function () {\n        return spread([this, all(arguments)], function (self, args) {\n            return callback.apply(self, args);\n        });\n    };\n}\n\n/**\n * sends a message to a value in a future turn\n * @param object* the recipient\n * @param op the name of the message operation, e.g., \"when\",\n * @param args further arguments to be forwarded to the operation\n * @returns result {Promise} a promise for the result of the operation\n */\nQ.dispatch = dispatch;\nfunction dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n}\n\nPromise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    nextTick(function () {\n        self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n};\n\n/**\n * Gets the value of a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to get\n * @return promise for the property value\n */\nQ.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n};\n\nPromise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n};\n\n/**\n * Sets the value of a property in a future turn.\n * @param object    promise or immediate reference for object object\n * @param name      name of property to set\n * @param value     new value of property\n * @return promise for the return value\n */\nQ.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n};\n\nPromise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n};\n\n/**\n * Deletes a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to delete\n * @return promise for the return value\n */\nQ.del = // XXX legacy\nQ[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n};\n\nPromise.prototype.del = // XXX legacy\nPromise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param value     a value to post, typically an array of\n *                  invocation arguments for promises that\n *                  are ultimately backed with `resolve` values,\n *                  as opposed to those backed with URLs\n *                  wherein the posted value can be any\n *                  JSON serializable object.\n * @return promise for the return value\n */\n// bound locally because it is used by other methods\nQ.mapply = // XXX As proposed by \"Redsandro\"\nQ.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n};\n\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param ...args   array of invocation arguments\n * @return promise for the return value\n */\nQ.send = // XXX Mark Miller's proposed parlance\nQ.mcall = // XXX As proposed by \"Redsandro\"\nQ.invoke = function (object, name /*...args*/) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n};\n\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\nPromise.prototype.invoke = function (name /*...args*/) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n};\n\n/**\n * Applies the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param args      array of application arguments\n */\nQ.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n};\n\nPromise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n};\n\n/**\n * Calls the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ[\"try\"] =\nQ.fcall = function (object /* ...args*/) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n};\n\nPromise.prototype.fcall = function (/*...args*/) {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n};\n\n/**\n * Binds the promised function, transforming return values into a fulfilled\n * promise and thrown errors into a rejected one.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ.fbind = function (object /*...args*/) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\nPromise.prototype.fbind = function (/*...args*/) {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\n\n/**\n * Requests the names of the owned properties of a promised\n * object in a future turn.\n * @param object    promise or immediate reference for target object\n * @return promise for the keys of the eventually settled object\n */\nQ.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n};\n\nPromise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n};\n\n/**\n * Turns an array of promises into a promise for an array.  If any of\n * the promises gets rejected, the whole array is rejected immediately.\n * @param {Array*} an array (or promise for an array) of values (or\n * promises for values)\n * @returns a promise for an array of the corresponding values\n */\n// By Mark Miller\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\nQ.all = all;\nfunction all(promises) {\n    return when(promises, function (promises) {\n        var countDown = 0;\n        var deferred = defer();\n        array_reduce(promises, function (undefined, promise, index) {\n            var snapshot;\n            if (\n                isPromise(promise) &&\n                (snapshot = promise.inspect()).state === \"fulfilled\"\n            ) {\n                promises[index] = snapshot.value;\n            } else {\n                ++countDown;\n                when(\n                    promise,\n                    function (value) {\n                        promises[index] = value;\n                        if (--countDown === 0) {\n                            deferred.resolve(promises);\n                        }\n                    },\n                    deferred.reject,\n                    function (progress) {\n                        deferred.notify({ index: index, value: progress });\n                    }\n                );\n            }\n        }, void 0);\n        if (countDown === 0) {\n            deferred.resolve(promises);\n        }\n        return deferred.promise;\n    });\n}\n\nPromise.prototype.all = function () {\n    return all(this);\n};\n\n/**\n * Waits for all promises to be settled, either fulfilled or\n * rejected.  This is distinct from `all` since that would stop\n * waiting at the first rejection.  The promise returned by\n * `allResolved` will never be rejected.\n * @param promises a promise for an array (or an array) of promises\n * (or values)\n * @return a promise for an array of promises\n */\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\nfunction allResolved(promises) {\n    return when(promises, function (promises) {\n        promises = array_map(promises, Q);\n        return when(all(array_map(promises, function (promise) {\n            return when(promise, noop, noop);\n        })), function () {\n            return promises;\n        });\n    });\n}\n\nPromise.prototype.allResolved = function () {\n    return allResolved(this);\n};\n\n/**\n * @see Promise#allSettled\n */\nQ.allSettled = allSettled;\nfunction allSettled(promises) {\n    return Q(promises).allSettled();\n}\n\n/**\n * Turns an array of promises into a promise for an array of their states (as\n * returned by `inspect`) when they have all settled.\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\n * promises for values)\n * @returns {Array[State]} an array of states for the respective values.\n */\nPromise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n        return all(array_map(promises, function (promise) {\n            promise = Q(promise);\n            function regardless() {\n                return promise.inspect();\n            }\n            return promise.then(regardless, regardless);\n        }));\n    });\n};\n\n/**\n * Captures the failure of a promise, giving an oportunity to recover\n * with a callback.  If the given promise is fulfilled, the returned\n * promise is fulfilled.\n * @param {Any*} promise for something\n * @param {Function} callback to fulfill the returned promise if the\n * given promise is rejected\n * @returns a promise for the return value of the callback\n */\nQ.fail = // XXX legacy\nQ[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n};\n\nPromise.prototype.fail = // XXX legacy\nPromise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n};\n\n/**\n * Attaches a listener that can respond to progress notifications from a\n * promise's originating deferred. This listener receives the exact arguments\n * passed to ``deferred.notify``.\n * @param {Any*} promise for something\n * @param {Function} callback to receive any progress notifications\n * @returns the given promise, unchanged\n */\nQ.progress = progress;\nfunction progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n}\n\nPromise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n};\n\n/**\n * Provides an opportunity to observe the settling of a promise,\n * regardless of whether the promise is fulfilled or rejected.  Forwards\n * the resolution to the returned promise when the callback is done.\n * The callback can return a promise to defer completion.\n * @param {Any*} promise\n * @param {Function} callback to observe the resolution of the given\n * promise, takes no arguments.\n * @returns a promise for the resolution of the given promise when\n * ``fin`` is done.\n */\nQ.fin = // XXX legacy\nQ[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n};\n\nPromise.prototype.fin = // XXX legacy\nPromise.prototype[\"finally\"] = function (callback) {\n    callback = Q(callback);\n    return this.then(function (value) {\n        return callback.fcall().then(function () {\n            return value;\n        });\n    }, function (reason) {\n        // TODO attempt to recycle the rejection with \"this\".\n        return callback.fcall().then(function () {\n            throw reason;\n        });\n    });\n};\n\n/**\n * Terminates a chain of promises, forcing rejections to be\n * thrown as exceptions.\n * @param {Any*} promise at the end of a chain of promises\n * @returns nothing\n */\nQ.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n};\n\nPromise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n        // forward to a future turn so that ``when``\n        // does not catch it and turn it into a rejection.\n        nextTick(function () {\n            makeStackTraceLong(error, promise);\n            if (Q.onerror) {\n                Q.onerror(error);\n            } else {\n                throw error;\n            }\n        });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promise = fulfilled || rejected || progress ?\n        this.then(fulfilled, rejected, progress) :\n        this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n        onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n};\n\n/**\n * Causes a promise to be rejected if it does not get fulfilled before\n * some milliseconds time out.\n * @param {Any*} promise\n * @param {Number} milliseconds timeout\n * @param {String} custom error message (optional)\n * @returns a promise for the resolution of the given promise if it is\n * fulfilled before the timeout, otherwise rejected.\n */\nQ.timeout = function (object, ms, message) {\n    return Q(object).timeout(ms, message);\n};\n\nPromise.prototype.timeout = function (ms, message) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n        deferred.reject(new Error(message || \"Timed out after \" + ms + \" ms\"));\n    }, ms);\n\n    this.then(function (value) {\n        clearTimeout(timeoutId);\n        deferred.resolve(value);\n    }, function (exception) {\n        clearTimeout(timeoutId);\n        deferred.reject(exception);\n    }, deferred.notify);\n\n    return deferred.promise;\n};\n\n/**\n * Returns a promise for the given value (or promised value), some\n * milliseconds after it resolved. Passes rejections immediately.\n * @param {Any*} promise\n * @param {Number} milliseconds\n * @returns a promise for the resolution of the given promise after milliseconds\n * time has elapsed since the resolution of the given promise.\n * If the given promise rejects, that is passed immediately.\n */\nQ.delay = function (object, timeout) {\n    if (timeout === void 0) {\n        timeout = object;\n        object = void 0;\n    }\n    return Q(object).delay(timeout);\n};\n\nPromise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n        var deferred = defer();\n        setTimeout(function () {\n            deferred.resolve(value);\n        }, timeout);\n        return deferred.promise;\n    });\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided as an array, and returns a promise.\n *\n *      Q.nfapply(FS.readFile, [__filename])\n *      .then(function (content) {\n *      })\n *\n */\nQ.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided individually, and returns a promise.\n * @example\n * Q.nfcall(FS.readFile, __filename)\n * .then(function (content) {\n * })\n *\n */\nQ.nfcall = function (callback /*...args*/) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfcall = function (/*...args*/) {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Wraps a NodeJS continuation passing function and returns an equivalent\n * version that returns a promise.\n * @example\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n * .then(console.log)\n * .done()\n */\nQ.nfbind =\nQ.denodeify = function (callback /*...args*/) {\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nfbind =\nPromise.prototype.denodeify = function (/*...args*/) {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n};\n\nQ.nbind = function (callback, thisp /*...args*/) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        function bound() {\n            return callback.apply(thisp, arguments);\n        }\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback with a given array of arguments, plus a provided callback.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param {Array} args arguments to pass to the method; the callback\n * will be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nmapply = // XXX As proposed by \"Redsandro\"\nQ.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n};\n\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback, forwarding the given variadic arguments, plus a provided\n * callback argument.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param ...args arguments to pass to the method; the callback will\n * be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\nQ.ninvoke = function (object, name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\nPromise.prototype.ninvoke = function (name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * If a function would like to support both Node continuation-passing-style and\n * promise-returning-style, it can end its internal promise chain with\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n * elects to use a nodeback, the result will be sent there.  If they do not\n * pass a nodeback, they will receive the result promise.\n * @param object a result (or a promise for a result)\n * @param {Function} nodeback a Node.js-style callback\n * @returns either the promise or nothing\n */\nQ.nodeify = nodeify;\nfunction nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n}\n\nPromise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n        this.then(function (value) {\n            nextTick(function () {\n                nodeback(null, value);\n            });\n        }, function (error) {\n            nextTick(function () {\n                nodeback(error);\n            });\n        });\n    } else {\n        return this;\n    }\n};\n\n// All code before this point will be filtered from stack traces.\nvar qEndingLine = captureLine();\n\nreturn Q;\n\n});\n\n}).call(this,require('_process'))\n},{\"_process\":3}]},{},[1])(1)\n});"]}